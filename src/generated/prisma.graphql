# source: http://localhost:4466
# timestamp: Sat Feb 29 2020 01:46:23 GMT+0900 (GMT+09:00)

type AggregateBookPost {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateContributor {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateGitPost {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSeries {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BookPost implements Node {
  id: ID!
  post: Post!
  bookName: String!
  bookPublisher: String!
  LinkedStore: [LinkedStore!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BookPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookPostEdge]!
  aggregate: AggregateBookPost!
}

input BookPostCreateInput {
  id: ID
  bookName: String!
  bookPublisher: String!
  LinkedStore: BookPostCreateLinkedStoreInput
  post: PostCreateOneWithoutBookPostsInput!
}

input BookPostCreateLinkedStoreInput {
  set: [LinkedStore!]
}

input BookPostCreateOneWithoutPostInput {
  create: BookPostCreateWithoutPostInput
  connect: BookPostWhereUniqueInput
}

input BookPostCreateWithoutPostInput {
  id: ID
  bookName: String!
  bookPublisher: String!
  LinkedStore: BookPostCreateLinkedStoreInput
}

"""An edge in a connection."""
type BookPostEdge {
  """The item at the end of the edge."""
  node: BookPost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookPostOrderByInput {
  id_ASC
  id_DESC
  bookName_ASC
  bookName_DESC
  bookPublisher_ASC
  bookPublisher_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPostPreviousValues {
  id: ID!
  bookName: String!
  bookPublisher: String!
  LinkedStore: [LinkedStore!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookPostSubscriptionPayload {
  mutation: MutationType!
  node: BookPost
  updatedFields: [String!]
  previousValues: BookPostPreviousValues
}

input BookPostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookPostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookPostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookPostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookPostWhereInput
}

input BookPostUpdateInput {
  bookName: String
  bookPublisher: String
  LinkedStore: BookPostUpdateLinkedStoreInput
  post: PostUpdateOneRequiredWithoutBookPostsInput
}

input BookPostUpdateLinkedStoreInput {
  set: [LinkedStore!]
}

input BookPostUpdateManyMutationInput {
  bookName: String
  bookPublisher: String
  LinkedStore: BookPostUpdateLinkedStoreInput
}

input BookPostUpdateOneRequiredWithoutPostInput {
  create: BookPostCreateWithoutPostInput
  connect: BookPostWhereUniqueInput
  update: BookPostUpdateWithoutPostDataInput
  upsert: BookPostUpsertWithoutPostInput
}

input BookPostUpdateWithoutPostDataInput {
  bookName: String
  bookPublisher: String
  LinkedStore: BookPostUpdateLinkedStoreInput
}

input BookPostUpsertWithoutPostInput {
  update: BookPostUpdateWithoutPostDataInput!
  create: BookPostCreateWithoutPostInput!
}

input BookPostWhereInput {
  """Logical AND on all given filters."""
  AND: [BookPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookPostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  bookName: String

  """All values that are not equal to given value."""
  bookName_not: String

  """All values that are contained in given list."""
  bookName_in: [String!]

  """All values that are not contained in given list."""
  bookName_not_in: [String!]

  """All values less than the given value."""
  bookName_lt: String

  """All values less than or equal the given value."""
  bookName_lte: String

  """All values greater than the given value."""
  bookName_gt: String

  """All values greater than or equal the given value."""
  bookName_gte: String

  """All values containing the given string."""
  bookName_contains: String

  """All values not containing the given string."""
  bookName_not_contains: String

  """All values starting with the given string."""
  bookName_starts_with: String

  """All values not starting with the given string."""
  bookName_not_starts_with: String

  """All values ending with the given string."""
  bookName_ends_with: String

  """All values not ending with the given string."""
  bookName_not_ends_with: String
  bookPublisher: String

  """All values that are not equal to given value."""
  bookPublisher_not: String

  """All values that are contained in given list."""
  bookPublisher_in: [String!]

  """All values that are not contained in given list."""
  bookPublisher_not_in: [String!]

  """All values less than the given value."""
  bookPublisher_lt: String

  """All values less than or equal the given value."""
  bookPublisher_lte: String

  """All values greater than the given value."""
  bookPublisher_gt: String

  """All values greater than or equal the given value."""
  bookPublisher_gte: String

  """All values containing the given string."""
  bookPublisher_contains: String

  """All values not containing the given string."""
  bookPublisher_not_contains: String

  """All values starting with the given string."""
  bookPublisher_starts_with: String

  """All values not starting with the given string."""
  bookPublisher_not_starts_with: String

  """All values ending with the given string."""
  bookPublisher_ends_with: String

  """All values not ending with the given string."""
  bookPublisher_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  post: PostWhereInput
}

input BookPostWhereUniqueInput {
  id: ID
}

enum Category {
  GENERAL
  GIT
  BOOK
}

type Comment implements Node {
  id: ID!
  post: Post!
  author: User!
  contents: String!
  replies(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  likes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  contents: String!
  likes: Int
  post: PostCreateOneWithoutCommentsInput!
  author: UserCreateOneWithoutCommentsInput!
  replies: CommentCreateManyInput
}

input CommentCreateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  contents: String!
  likes: Int
  post: PostCreateOneWithoutCommentsInput!
  replies: CommentCreateManyInput
}

input CommentCreateWithoutPostInput {
  id: ID
  contents: String!
  likes: Int
  author: UserCreateOneWithoutCommentsInput!
  replies: CommentCreateManyInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  contents_ASC
  contents_DESC
  likes_ASC
  likes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  contents: String!
  likes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contents: String

  """All values that are not equal to given value."""
  contents_not: String

  """All values that are contained in given list."""
  contents_in: [String!]

  """All values that are not contained in given list."""
  contents_not_in: [String!]

  """All values less than the given value."""
  contents_lt: String

  """All values less than or equal the given value."""
  contents_lte: String

  """All values greater than the given value."""
  contents_gt: String

  """All values greater than or equal the given value."""
  contents_gte: String

  """All values containing the given string."""
  contents_contains: String

  """All values not containing the given string."""
  contents_not_contains: String

  """All values starting with the given string."""
  contents_starts_with: String

  """All values not starting with the given string."""
  contents_not_starts_with: String

  """All values ending with the given string."""
  contents_ends_with: String

  """All values not ending with the given string."""
  contents_not_ends_with: String
  likes: Int

  """All values that are not equal to given value."""
  likes_not: Int

  """All values that are contained in given list."""
  likes_in: [Int!]

  """All values that are not contained in given list."""
  likes_not_in: [Int!]

  """All values less than the given value."""
  likes_lt: Int

  """All values less than or equal the given value."""
  likes_lte: Int

  """All values greater than the given value."""
  likes_gt: Int

  """All values greater than or equal the given value."""
  likes_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateDataInput {
  contents: String
  likes: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateInput {
  contents: String
  likes: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  author: UserUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateManyDataInput {
  contents: String
  likes: Int
}

input CommentUpdateManyInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
}

input CommentUpdateManyMutationInput {
  contents: String
  likes: Int
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  contents: String
  likes: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateWithoutPostDataInput {
  contents: String
  likes: Int
  author: UserUpdateOneRequiredWithoutCommentsInput
  replies: CommentUpdateManyInput
}

input CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateDataInput!
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contents: String

  """All values that are not equal to given value."""
  contents_not: String

  """All values that are contained in given list."""
  contents_in: [String!]

  """All values that are not contained in given list."""
  contents_not_in: [String!]

  """All values less than the given value."""
  contents_lt: String

  """All values less than or equal the given value."""
  contents_lte: String

  """All values greater than the given value."""
  contents_gt: String

  """All values greater than or equal the given value."""
  contents_gte: String

  """All values containing the given string."""
  contents_contains: String

  """All values not containing the given string."""
  contents_not_contains: String

  """All values starting with the given string."""
  contents_starts_with: String

  """All values not starting with the given string."""
  contents_not_starts_with: String

  """All values ending with the given string."""
  contents_ends_with: String

  """All values not ending with the given string."""
  contents_not_ends_with: String
  likes: Int

  """All values that are not equal to given value."""
  likes_not: Int

  """All values that are contained in given list."""
  likes_in: [Int!]

  """All values that are not contained in given list."""
  likes_not_in: [Int!]

  """All values less than the given value."""
  likes_lt: Int

  """All values less than or equal the given value."""
  likes_lte: Int

  """All values greater than the given value."""
  likes_gt: Int

  """All values greater than or equal the given value."""
  likes_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  post: PostWhereInput
  author: UserWhereInput
  replies_every: CommentWhereInput
  replies_some: CommentWhereInput
  replies_none: CommentWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

type Contributor implements Node {
  id: ID!
  user: User!
  type: [ContributorType!]!
  contributedAt: DateTime!
  correctionRange: String
}

"""A connection to a list of items."""
type ContributorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorEdge]!
  aggregate: AggregateContributor!
}

input ContributorCreateInput {
  id: ID
  contributedAt: DateTime!
  correctionRange: String
  type: ContributorCreatetypeInput
  user: UserCreateOneInput!
}

input ContributorCreatetypeInput {
  set: [ContributorType!]
}

"""An edge in a connection."""
type ContributorEdge {
  """The item at the end of the edge."""
  node: Contributor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContributorOrderByInput {
  id_ASC
  id_DESC
  contributedAt_ASC
  contributedAt_DESC
  correctionRange_ASC
  correctionRange_DESC
}

type ContributorPreviousValues {
  id: ID!
  type: [ContributorType!]!
  contributedAt: DateTime!
  correctionRange: String
}

type ContributorSubscriptionPayload {
  mutation: MutationType!
  node: Contributor
  updatedFields: [String!]
  previousValues: ContributorPreviousValues
}

input ContributorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorWhereInput
}

enum ContributorType {
  TYPO
  INFO_CORRECTION
  INFO_ADDTION
}

input ContributorUpdateInput {
  contributedAt: DateTime
  correctionRange: String
  type: ContributorUpdatetypeInput
  user: UserUpdateOneRequiredInput
}

input ContributorUpdateManyMutationInput {
  contributedAt: DateTime
  correctionRange: String
  type: ContributorUpdatetypeInput
}

input ContributorUpdatetypeInput {
  set: [ContributorType!]
}

input ContributorWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contributedAt: DateTime

  """All values that are not equal to given value."""
  contributedAt_not: DateTime

  """All values that are contained in given list."""
  contributedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  contributedAt_not_in: [DateTime!]

  """All values less than the given value."""
  contributedAt_lt: DateTime

  """All values less than or equal the given value."""
  contributedAt_lte: DateTime

  """All values greater than the given value."""
  contributedAt_gt: DateTime

  """All values greater than or equal the given value."""
  contributedAt_gte: DateTime
  correctionRange: String

  """All values that are not equal to given value."""
  correctionRange_not: String

  """All values that are contained in given list."""
  correctionRange_in: [String!]

  """All values that are not contained in given list."""
  correctionRange_not_in: [String!]

  """All values less than the given value."""
  correctionRange_lt: String

  """All values less than or equal the given value."""
  correctionRange_lte: String

  """All values greater than the given value."""
  correctionRange_gt: String

  """All values greater than or equal the given value."""
  correctionRange_gte: String

  """All values containing the given string."""
  correctionRange_contains: String

  """All values not containing the given string."""
  correctionRange_not_contains: String

  """All values starting with the given string."""
  correctionRange_starts_with: String

  """All values not starting with the given string."""
  correctionRange_not_starts_with: String

  """All values ending with the given string."""
  correctionRange_ends_with: String

  """All values not ending with the given string."""
  correctionRange_not_ends_with: String
  user: UserWhereInput
}

input ContributorWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event implements Node {
  id: ID!
  name: String!
  topic: Topic!
  description: String!
  mainImg: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  name: String!
  description: String!
  mainImg: String
  topic: TopicCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutTopicInput {
  create: [EventCreateWithoutTopicInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutTopicInput {
  id: ID
  name: String!
  description: String!
  mainImg: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  mainImg_ASC
  mainImg_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  description: String!
  mainImg: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  mainImg: String

  """All values that are not equal to given value."""
  mainImg_not: String

  """All values that are contained in given list."""
  mainImg_in: [String!]

  """All values that are not contained in given list."""
  mainImg_not_in: [String!]

  """All values less than the given value."""
  mainImg_lt: String

  """All values less than or equal the given value."""
  mainImg_lte: String

  """All values greater than the given value."""
  mainImg_gt: String

  """All values greater than or equal the given value."""
  mainImg_gte: String

  """All values containing the given string."""
  mainImg_contains: String

  """All values not containing the given string."""
  mainImg_not_contains: String

  """All values starting with the given string."""
  mainImg_starts_with: String

  """All values not starting with the given string."""
  mainImg_not_starts_with: String

  """All values ending with the given string."""
  mainImg_ends_with: String

  """All values not ending with the given string."""
  mainImg_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  name: String
  description: String
  mainImg: String
  topic: TopicUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  name: String
  description: String
  mainImg: String
}

input EventUpdateManyMutationInput {
  name: String
  description: String
  mainImg: String
}

input EventUpdateManyWithoutTopicInput {
  create: [EventCreateWithoutTopicInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTopicInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTopicInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutTopicDataInput {
  name: String
  description: String
  mainImg: String
}

input EventUpdateWithWhereUniqueWithoutTopicInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTopicDataInput!
}

input EventUpsertWithWhereUniqueWithoutTopicInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTopicDataInput!
  create: EventCreateWithoutTopicInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  mainImg: String

  """All values that are not equal to given value."""
  mainImg_not: String

  """All values that are contained in given list."""
  mainImg_in: [String!]

  """All values that are not contained in given list."""
  mainImg_not_in: [String!]

  """All values less than the given value."""
  mainImg_lt: String

  """All values less than or equal the given value."""
  mainImg_lte: String

  """All values greater than the given value."""
  mainImg_gt: String

  """All values greater than or equal the given value."""
  mainImg_gte: String

  """All values containing the given string."""
  mainImg_contains: String

  """All values not containing the given string."""
  mainImg_not_contains: String

  """All values starting with the given string."""
  mainImg_starts_with: String

  """All values not starting with the given string."""
  mainImg_not_starts_with: String

  """All values ending with the given string."""
  mainImg_ends_with: String

  """All values not ending with the given string."""
  mainImg_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  topic: TopicWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type File implements Node {
  id: ID!
  author: User!
  alias: String!
  type: [FileType!]!
  size: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  alias: String!
  size: String!
  type: FileCreatetypeInput
  author: UserCreateOneInput!
}

input FileCreatetypeInput {
  set: [FileType!]
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  size_ASC
  size_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  alias: String!
  type: [FileType!]!
  size: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

enum FileType {
  IMAGE
  PDF
  ETC
}

input FileUpdateInput {
  alias: String
  size: String
  type: FileUpdatetypeInput
  author: UserUpdateOneRequiredInput
}

input FileUpdateManyMutationInput {
  alias: String
  size: String
  type: FileUpdatetypeInput
}

input FileUpdatetypeInput {
  set: [FileType!]
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  size: String

  """All values that are not equal to given value."""
  size_not: String

  """All values that are contained in given list."""
  size_in: [String!]

  """All values that are not contained in given list."""
  size_not_in: [String!]

  """All values less than the given value."""
  size_lt: String

  """All values less than or equal the given value."""
  size_lte: String

  """All values greater than the given value."""
  size_gt: String

  """All values greater than or equal the given value."""
  size_gte: String

  """All values containing the given string."""
  size_contains: String

  """All values not containing the given string."""
  size_not_contains: String

  """All values starting with the given string."""
  size_starts_with: String

  """All values not starting with the given string."""
  size_not_starts_with: String

  """All values ending with the given string."""
  size_ends_with: String

  """All values not ending with the given string."""
  size_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
}

input FileWhereUniqueInput {
  id: ID
}

type GitPost implements Node {
  id: ID!
  post: Post!
  gitId: String!
  gitAuthor: [String!]!
  gitTitle: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type GitPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GitPostEdge]!
  aggregate: AggregateGitPost!
}

input GitPostCreategitAuthorInput {
  set: [String!]
}

input GitPostCreateInput {
  id: ID
  gitId: String!
  gitTitle: String!
  gitAuthor: GitPostCreategitAuthorInput
  post: PostCreateOneWithoutGitPostsInput!
}

input GitPostCreateOneWithoutPostInput {
  create: GitPostCreateWithoutPostInput
  connect: GitPostWhereUniqueInput
}

input GitPostCreateWithoutPostInput {
  id: ID
  gitId: String!
  gitTitle: String!
  gitAuthor: GitPostCreategitAuthorInput
}

"""An edge in a connection."""
type GitPostEdge {
  """The item at the end of the edge."""
  node: GitPost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GitPostOrderByInput {
  id_ASC
  id_DESC
  gitId_ASC
  gitId_DESC
  gitTitle_ASC
  gitTitle_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GitPostPreviousValues {
  id: ID!
  gitId: String!
  gitAuthor: [String!]!
  gitTitle: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GitPostSubscriptionPayload {
  mutation: MutationType!
  node: GitPost
  updatedFields: [String!]
  previousValues: GitPostPreviousValues
}

input GitPostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GitPostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GitPostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GitPostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GitPostWhereInput
}

input GitPostUpdategitAuthorInput {
  set: [String!]
}

input GitPostUpdateInput {
  gitId: String
  gitTitle: String
  gitAuthor: GitPostUpdategitAuthorInput
  post: PostUpdateOneRequiredWithoutGitPostsInput
}

input GitPostUpdateManyMutationInput {
  gitId: String
  gitTitle: String
  gitAuthor: GitPostUpdategitAuthorInput
}

input GitPostUpdateOneRequiredWithoutPostInput {
  create: GitPostCreateWithoutPostInput
  connect: GitPostWhereUniqueInput
  update: GitPostUpdateWithoutPostDataInput
  upsert: GitPostUpsertWithoutPostInput
}

input GitPostUpdateWithoutPostDataInput {
  gitId: String
  gitTitle: String
  gitAuthor: GitPostUpdategitAuthorInput
}

input GitPostUpsertWithoutPostInput {
  update: GitPostUpdateWithoutPostDataInput!
  create: GitPostCreateWithoutPostInput!
}

input GitPostWhereInput {
  """Logical AND on all given filters."""
  AND: [GitPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [GitPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GitPostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gitId: String

  """All values that are not equal to given value."""
  gitId_not: String

  """All values that are contained in given list."""
  gitId_in: [String!]

  """All values that are not contained in given list."""
  gitId_not_in: [String!]

  """All values less than the given value."""
  gitId_lt: String

  """All values less than or equal the given value."""
  gitId_lte: String

  """All values greater than the given value."""
  gitId_gt: String

  """All values greater than or equal the given value."""
  gitId_gte: String

  """All values containing the given string."""
  gitId_contains: String

  """All values not containing the given string."""
  gitId_not_contains: String

  """All values starting with the given string."""
  gitId_starts_with: String

  """All values not starting with the given string."""
  gitId_not_starts_with: String

  """All values ending with the given string."""
  gitId_ends_with: String

  """All values not ending with the given string."""
  gitId_not_ends_with: String
  gitTitle: String

  """All values that are not equal to given value."""
  gitTitle_not: String

  """All values that are contained in given list."""
  gitTitle_in: [String!]

  """All values that are not contained in given list."""
  gitTitle_not_in: [String!]

  """All values less than the given value."""
  gitTitle_lt: String

  """All values less than or equal the given value."""
  gitTitle_lte: String

  """All values greater than the given value."""
  gitTitle_gt: String

  """All values greater than or equal the given value."""
  gitTitle_gte: String

  """All values containing the given string."""
  gitTitle_contains: String

  """All values not containing the given string."""
  gitTitle_not_contains: String

  """All values starting with the given string."""
  gitTitle_starts_with: String

  """All values not starting with the given string."""
  gitTitle_not_starts_with: String

  """All values ending with the given string."""
  gitTitle_ends_with: String

  """All values not ending with the given string."""
  gitTitle_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  post: PostWhereInput
}

input GitPostWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

enum levelType {
  VISITOR
  MEMBER
  WRITER
  MANAGER
}

enum LinkedStore {
  YES24
  KYOBO
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createGitPost(data: GitPostCreateInput!): GitPost!
  createBookPost(data: BookPostCreateInput!): BookPost!
  createContributor(data: ContributorCreateInput!): Contributor!
  createSeries(data: SeriesCreateInput!): Series!
  createTopic(data: TopicCreateInput!): Topic!
  createEvent(data: EventCreateInput!): Event!
  createFile(data: FileCreateInput!): File!
  createUser(data: UserCreateInput!): User!
  createComment(data: CommentCreateInput!): Comment!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateGitPost(data: GitPostUpdateInput!, where: GitPostWhereUniqueInput!): GitPost
  updateBookPost(data: BookPostUpdateInput!, where: BookPostWhereUniqueInput!): BookPost
  updateContributor(data: ContributorUpdateInput!, where: ContributorWhereUniqueInput!): Contributor
  updateSeries(data: SeriesUpdateInput!, where: SeriesWhereUniqueInput!): Series
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deletePost(where: PostWhereUniqueInput!): Post
  deleteGitPost(where: GitPostWhereUniqueInput!): GitPost
  deleteBookPost(where: BookPostWhereUniqueInput!): BookPost
  deleteContributor(where: ContributorWhereUniqueInput!): Contributor
  deleteSeries(where: SeriesWhereUniqueInput!): Series
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteFile(where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertGitPost(where: GitPostWhereUniqueInput!, create: GitPostCreateInput!, update: GitPostUpdateInput!): GitPost!
  upsertBookPost(where: BookPostWhereUniqueInput!, create: BookPostCreateInput!, update: BookPostUpdateInput!): BookPost!
  upsertContributor(where: ContributorWhereUniqueInput!, create: ContributorCreateInput!, update: ContributorUpdateInput!): Contributor!
  upsertSeries(where: SeriesWhereUniqueInput!, create: SeriesCreateInput!, update: SeriesUpdateInput!): Series!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyGitPosts(data: GitPostUpdateManyMutationInput!, where: GitPostWhereInput): BatchPayload!
  updateManyBookPosts(data: BookPostUpdateManyMutationInput!, where: BookPostWhereInput): BatchPayload!
  updateManyContributors(data: ContributorUpdateManyMutationInput!, where: ContributorWhereInput): BatchPayload!
  updateManySerieses(data: SeriesUpdateManyMutationInput!, where: SeriesWhereInput): BatchPayload!
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyGitPosts(where: GitPostWhereInput): BatchPayload!
  deleteManyBookPosts(where: BookPostWhereInput): BatchPayload!
  deleteManyContributors(where: ContributorWhereInput): BatchPayload!
  deleteManySerieses(where: SeriesWhereInput): BatchPayload!
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  category: Category!
  coverImg: String
  owner: User!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  gitPosts: GitPost!
  bookPosts: BookPost!
  series: Series
  contents: String!
  keywords: [String!]!
  summary: [String!]!
  numViews: Int!
  numLikes: Int!
  numComments: Int!
  isPrivate: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  topics: TopicCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  bookPosts: BookPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

input PostCreatekeywordsInput {
  set: [String!]
}

input PostCreateManyWithoutOwnerInput {
  create: [PostCreateWithoutOwnerInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutSeriesInput {
  create: [PostCreateWithoutSeriesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutTopicsInput {
  create: [PostCreateWithoutTopicsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutBookPostsInput {
  create: PostCreateWithoutBookPostsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutGitPostsInput {
  create: PostCreateWithoutGitPostsInput
  connect: PostWhereUniqueInput
}

input PostCreatesummaryInput {
  set: [String!]
}

input PostCreateWithoutBookPostsInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  topics: TopicCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  topics: TopicCreateManyWithoutPostsInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  bookPosts: BookPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

input PostCreateWithoutGitPostsInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  topics: TopicCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  bookPosts: BookPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

input PostCreateWithoutOwnerInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  topics: TopicCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  bookPosts: BookPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

input PostCreateWithoutSeriesInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  topics: TopicCreateManyWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  bookPosts: BookPostCreateOneWithoutPostInput!
}

input PostCreateWithoutTopicsInput {
  id: ID
  category: Category
  coverImg: String
  contents: String!
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostCreatekeywordsInput
  summary: PostCreatesummaryInput
  owner: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  gitPosts: GitPostCreateOneWithoutPostInput!
  bookPosts: BookPostCreateOneWithoutPostInput!
  series: SeriesCreateOneWithoutPostsInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  coverImg_ASC
  coverImg_DESC
  contents_ASC
  contents_DESC
  numViews_ASC
  numViews_DESC
  numLikes_ASC
  numLikes_DESC
  numComments_ASC
  numComments_DESC
  isPrivate_ASC
  isPrivate_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  category: Category!
  coverImg: String
  contents: String!
  keywords: [String!]!
  summary: [String!]!
  numViews: Int!
  numLikes: Int!
  numComments: Int!
  isPrivate: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: Category

  """All values that are not equal to given value."""
  category_not: Category

  """All values that are contained in given list."""
  category_in: [Category!]

  """All values that are not contained in given list."""
  category_not_in: [Category!]
  coverImg: String

  """All values that are not equal to given value."""
  coverImg_not: String

  """All values that are contained in given list."""
  coverImg_in: [String!]

  """All values that are not contained in given list."""
  coverImg_not_in: [String!]

  """All values less than the given value."""
  coverImg_lt: String

  """All values less than or equal the given value."""
  coverImg_lte: String

  """All values greater than the given value."""
  coverImg_gt: String

  """All values greater than or equal the given value."""
  coverImg_gte: String

  """All values containing the given string."""
  coverImg_contains: String

  """All values not containing the given string."""
  coverImg_not_contains: String

  """All values starting with the given string."""
  coverImg_starts_with: String

  """All values not starting with the given string."""
  coverImg_not_starts_with: String

  """All values ending with the given string."""
  coverImg_ends_with: String

  """All values not ending with the given string."""
  coverImg_not_ends_with: String
  contents: String

  """All values that are not equal to given value."""
  contents_not: String

  """All values that are contained in given list."""
  contents_in: [String!]

  """All values that are not contained in given list."""
  contents_not_in: [String!]

  """All values less than the given value."""
  contents_lt: String

  """All values less than or equal the given value."""
  contents_lte: String

  """All values greater than the given value."""
  contents_gt: String

  """All values greater than or equal the given value."""
  contents_gte: String

  """All values containing the given string."""
  contents_contains: String

  """All values not containing the given string."""
  contents_not_contains: String

  """All values starting with the given string."""
  contents_starts_with: String

  """All values not starting with the given string."""
  contents_not_starts_with: String

  """All values ending with the given string."""
  contents_ends_with: String

  """All values not ending with the given string."""
  contents_not_ends_with: String
  numViews: Int

  """All values that are not equal to given value."""
  numViews_not: Int

  """All values that are contained in given list."""
  numViews_in: [Int!]

  """All values that are not contained in given list."""
  numViews_not_in: [Int!]

  """All values less than the given value."""
  numViews_lt: Int

  """All values less than or equal the given value."""
  numViews_lte: Int

  """All values greater than the given value."""
  numViews_gt: Int

  """All values greater than or equal the given value."""
  numViews_gte: Int
  numLikes: Int

  """All values that are not equal to given value."""
  numLikes_not: Int

  """All values that are contained in given list."""
  numLikes_in: [Int!]

  """All values that are not contained in given list."""
  numLikes_not_in: [Int!]

  """All values less than the given value."""
  numLikes_lt: Int

  """All values less than or equal the given value."""
  numLikes_lte: Int

  """All values greater than the given value."""
  numLikes_gt: Int

  """All values greater than or equal the given value."""
  numLikes_gte: Int
  numComments: Int

  """All values that are not equal to given value."""
  numComments_not: Int

  """All values that are contained in given list."""
  numComments_in: [Int!]

  """All values that are not contained in given list."""
  numComments_not_in: [Int!]

  """All values less than the given value."""
  numComments_lt: Int

  """All values less than or equal the given value."""
  numComments_lte: Int

  """All values greater than the given value."""
  numComments_gt: Int

  """All values greater than or equal the given value."""
  numComments_gte: Int
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  topics: TopicUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdatekeywordsInput {
  set: [String!]
}

input PostUpdateManyDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
}

input PostUpdateManyMutationInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
}

input PostUpdateManyWithoutOwnerInput {
  create: [PostCreateWithoutOwnerInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PostUpdateManyWithoutSeriesInput {
  create: [PostCreateWithoutSeriesInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutSeriesInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutSeriesInput!]
}

input PostUpdateManyWithoutTopicsInput {
  create: [PostCreateWithoutTopicsInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTopicsInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTopicsInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutBookPostsInput {
  create: PostCreateWithoutBookPostsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutBookPostsDataInput
  upsert: PostUpsertWithoutBookPostsInput
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneRequiredWithoutGitPostsInput {
  create: PostCreateWithoutGitPostsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutGitPostsDataInput
  upsert: PostUpsertWithoutGitPostsInput
}

input PostUpdatesummaryInput {
  set: [String!]
}

input PostUpdateWithoutBookPostsDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  topics: TopicUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdateWithoutCommentsDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  topics: TopicUpdateManyWithoutPostsInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdateWithoutGitPostsDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  topics: TopicUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdateWithoutOwnerDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  topics: TopicUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdateWithoutSeriesDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  topics: TopicUpdateManyWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
}

input PostUpdateWithoutTopicsDataInput {
  category: Category
  coverImg: String
  contents: String
  numViews: Int
  numLikes: Int
  numComments: Int
  isPrivate: Boolean
  publishedAt: DateTime
  keywords: PostUpdatekeywordsInput
  summary: PostUpdatesummaryInput
  owner: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  gitPosts: GitPostUpdateOneRequiredWithoutPostInput
  bookPosts: BookPostUpdateOneRequiredWithoutPostInput
  series: SeriesUpdateOneWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutOwnerDataInput!
}

input PostUpdateWithWhereUniqueWithoutSeriesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutSeriesDataInput!
}

input PostUpdateWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTopicsDataInput!
}

input PostUpsertWithoutBookPostsInput {
  update: PostUpdateWithoutBookPostsDataInput!
  create: PostCreateWithoutBookPostsInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutGitPostsInput {
  update: PostUpdateWithoutGitPostsDataInput!
  create: PostCreateWithoutGitPostsInput!
}

input PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutOwnerDataInput!
  create: PostCreateWithoutOwnerInput!
}

input PostUpsertWithWhereUniqueWithoutSeriesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutSeriesDataInput!
  create: PostCreateWithoutSeriesInput!
}

input PostUpsertWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTopicsDataInput!
  create: PostCreateWithoutTopicsInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: Category

  """All values that are not equal to given value."""
  category_not: Category

  """All values that are contained in given list."""
  category_in: [Category!]

  """All values that are not contained in given list."""
  category_not_in: [Category!]
  coverImg: String

  """All values that are not equal to given value."""
  coverImg_not: String

  """All values that are contained in given list."""
  coverImg_in: [String!]

  """All values that are not contained in given list."""
  coverImg_not_in: [String!]

  """All values less than the given value."""
  coverImg_lt: String

  """All values less than or equal the given value."""
  coverImg_lte: String

  """All values greater than the given value."""
  coverImg_gt: String

  """All values greater than or equal the given value."""
  coverImg_gte: String

  """All values containing the given string."""
  coverImg_contains: String

  """All values not containing the given string."""
  coverImg_not_contains: String

  """All values starting with the given string."""
  coverImg_starts_with: String

  """All values not starting with the given string."""
  coverImg_not_starts_with: String

  """All values ending with the given string."""
  coverImg_ends_with: String

  """All values not ending with the given string."""
  coverImg_not_ends_with: String
  contents: String

  """All values that are not equal to given value."""
  contents_not: String

  """All values that are contained in given list."""
  contents_in: [String!]

  """All values that are not contained in given list."""
  contents_not_in: [String!]

  """All values less than the given value."""
  contents_lt: String

  """All values less than or equal the given value."""
  contents_lte: String

  """All values greater than the given value."""
  contents_gt: String

  """All values greater than or equal the given value."""
  contents_gte: String

  """All values containing the given string."""
  contents_contains: String

  """All values not containing the given string."""
  contents_not_contains: String

  """All values starting with the given string."""
  contents_starts_with: String

  """All values not starting with the given string."""
  contents_not_starts_with: String

  """All values ending with the given string."""
  contents_ends_with: String

  """All values not ending with the given string."""
  contents_not_ends_with: String
  numViews: Int

  """All values that are not equal to given value."""
  numViews_not: Int

  """All values that are contained in given list."""
  numViews_in: [Int!]

  """All values that are not contained in given list."""
  numViews_not_in: [Int!]

  """All values less than the given value."""
  numViews_lt: Int

  """All values less than or equal the given value."""
  numViews_lte: Int

  """All values greater than the given value."""
  numViews_gt: Int

  """All values greater than or equal the given value."""
  numViews_gte: Int
  numLikes: Int

  """All values that are not equal to given value."""
  numLikes_not: Int

  """All values that are contained in given list."""
  numLikes_in: [Int!]

  """All values that are not contained in given list."""
  numLikes_not_in: [Int!]

  """All values less than the given value."""
  numLikes_lt: Int

  """All values less than or equal the given value."""
  numLikes_lte: Int

  """All values greater than the given value."""
  numLikes_gt: Int

  """All values greater than or equal the given value."""
  numLikes_gte: Int
  numComments: Int

  """All values that are not equal to given value."""
  numComments_not: Int

  """All values that are contained in given list."""
  numComments_in: [Int!]

  """All values that are not contained in given list."""
  numComments_not_in: [Int!]

  """All values less than the given value."""
  numComments_lt: Int

  """All values less than or equal the given value."""
  numComments_lte: Int

  """All values greater than the given value."""
  numComments_gt: Int

  """All values greater than or equal the given value."""
  numComments_gte: Int
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  owner: UserWhereInput
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  gitPosts: GitPostWhereInput
  bookPosts: BookPostWhereInput
  series: SeriesWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  gitPosts(where: GitPostWhereInput, orderBy: GitPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GitPost]!
  bookPosts(where: BookPostWhereInput, orderBy: BookPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookPost]!
  contributors(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contributor]!
  serieses(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Series]!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  post(where: PostWhereUniqueInput!): Post
  gitPost(where: GitPostWhereUniqueInput!): GitPost
  bookPost(where: BookPostWhereUniqueInput!): BookPost
  contributor(where: ContributorWhereUniqueInput!): Contributor
  series(where: SeriesWhereUniqueInput!): Series
  topic(where: TopicWhereUniqueInput!): Topic
  event(where: EventWhereUniqueInput!): Event
  file(where: FileWhereUniqueInput!): File
  user(where: UserWhereUniqueInput!): User
  comment(where: CommentWhereUniqueInput!): Comment
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  gitPostsConnection(where: GitPostWhereInput, orderBy: GitPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GitPostConnection!
  bookPostsConnection(where: BookPostWhereInput, orderBy: BookPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookPostConnection!
  contributorsConnection(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorConnection!
  seriesesConnection(where: SeriesWhereInput, orderBy: SeriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeriesConnection!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Series implements Node {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  description: String!
  numViews: Int!
  numLikes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SeriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeriesEdge]!
  aggregate: AggregateSeries!
}

input SeriesCreateInput {
  id: ID
  name: String!
  description: String!
  numViews: Int
  numLikes: Int
  posts: PostCreateManyWithoutSeriesInput
}

input SeriesCreateOneWithoutPostsInput {
  create: SeriesCreateWithoutPostsInput
  connect: SeriesWhereUniqueInput
}

input SeriesCreateWithoutPostsInput {
  id: ID
  name: String!
  description: String!
  numViews: Int
  numLikes: Int
}

"""An edge in a connection."""
type SeriesEdge {
  """The item at the end of the edge."""
  node: Series!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeriesOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  numViews_ASC
  numViews_DESC
  numLikes_ASC
  numLikes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SeriesPreviousValues {
  id: ID!
  name: String!
  description: String!
  numViews: Int!
  numLikes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SeriesSubscriptionPayload {
  mutation: MutationType!
  node: Series
  updatedFields: [String!]
  previousValues: SeriesPreviousValues
}

input SeriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeriesWhereInput
}

input SeriesUpdateInput {
  name: String
  description: String
  numViews: Int
  numLikes: Int
  posts: PostUpdateManyWithoutSeriesInput
}

input SeriesUpdateManyMutationInput {
  name: String
  description: String
  numViews: Int
  numLikes: Int
}

input SeriesUpdateOneWithoutPostsInput {
  create: SeriesCreateWithoutPostsInput
  connect: SeriesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SeriesUpdateWithoutPostsDataInput
  upsert: SeriesUpsertWithoutPostsInput
}

input SeriesUpdateWithoutPostsDataInput {
  name: String
  description: String
  numViews: Int
  numLikes: Int
}

input SeriesUpsertWithoutPostsInput {
  update: SeriesUpdateWithoutPostsDataInput!
  create: SeriesCreateWithoutPostsInput!
}

input SeriesWhereInput {
  """Logical AND on all given filters."""
  AND: [SeriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  numViews: Int

  """All values that are not equal to given value."""
  numViews_not: Int

  """All values that are contained in given list."""
  numViews_in: [Int!]

  """All values that are not contained in given list."""
  numViews_not_in: [Int!]

  """All values less than the given value."""
  numViews_lt: Int

  """All values less than or equal the given value."""
  numViews_lte: Int

  """All values greater than the given value."""
  numViews_gt: Int

  """All values greater than or equal the given value."""
  numViews_gte: Int
  numLikes: Int

  """All values that are not equal to given value."""
  numLikes_not: Int

  """All values that are contained in given list."""
  numLikes_in: [Int!]

  """All values that are not contained in given list."""
  numLikes_not_in: [Int!]

  """All values less than the given value."""
  numLikes_lt: Int

  """All values less than or equal the given value."""
  numLikes_lte: Int

  """All values greater than the given value."""
  numLikes_gt: Int

  """All values greater than or equal the given value."""
  numLikes_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input SeriesWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  gitPost(where: GitPostSubscriptionWhereInput): GitPostSubscriptionPayload
  bookPost(where: BookPostSubscriptionWhereInput): BookPostSubscriptionPayload
  contributor(where: ContributorSubscriptionWhereInput): ContributorSubscriptionPayload
  series(where: SeriesSubscriptionWhereInput): SeriesSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}

type Topic implements Node {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  coverImg: String
  coverDescription: String
  numViews: Int!
  backImg: String
  icon: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TopicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  name: String!
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  posts: PostCreateManyWithoutTopicsInput
  events: EventCreateManyWithoutTopicInput
}

input TopicCreateManyWithoutPostsInput {
  create: [TopicCreateWithoutPostsInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneWithoutEventsInput {
  create: TopicCreateWithoutEventsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutEventsInput {
  id: ID
  name: String!
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  posts: PostCreateManyWithoutTopicsInput
}

input TopicCreateWithoutPostsInput {
  id: ID
  name: String!
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  events: EventCreateManyWithoutTopicInput
}

"""An edge in a connection."""
type TopicEdge {
  """The item at the end of the edge."""
  node: Topic!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  coverImg_ASC
  coverImg_DESC
  coverDescription_ASC
  coverDescription_DESC
  numViews_ASC
  numViews_DESC
  backImg_ASC
  backImg_DESC
  icon_ASC
  icon_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TopicPreviousValues {
  id: ID!
  name: String!
  coverImg: String
  coverDescription: String
  numViews: Int!
  backImg: String
  icon: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TopicScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coverImg: String

  """All values that are not equal to given value."""
  coverImg_not: String

  """All values that are contained in given list."""
  coverImg_in: [String!]

  """All values that are not contained in given list."""
  coverImg_not_in: [String!]

  """All values less than the given value."""
  coverImg_lt: String

  """All values less than or equal the given value."""
  coverImg_lte: String

  """All values greater than the given value."""
  coverImg_gt: String

  """All values greater than or equal the given value."""
  coverImg_gte: String

  """All values containing the given string."""
  coverImg_contains: String

  """All values not containing the given string."""
  coverImg_not_contains: String

  """All values starting with the given string."""
  coverImg_starts_with: String

  """All values not starting with the given string."""
  coverImg_not_starts_with: String

  """All values ending with the given string."""
  coverImg_ends_with: String

  """All values not ending with the given string."""
  coverImg_not_ends_with: String
  coverDescription: String

  """All values that are not equal to given value."""
  coverDescription_not: String

  """All values that are contained in given list."""
  coverDescription_in: [String!]

  """All values that are not contained in given list."""
  coverDescription_not_in: [String!]

  """All values less than the given value."""
  coverDescription_lt: String

  """All values less than or equal the given value."""
  coverDescription_lte: String

  """All values greater than the given value."""
  coverDescription_gt: String

  """All values greater than or equal the given value."""
  coverDescription_gte: String

  """All values containing the given string."""
  coverDescription_contains: String

  """All values not containing the given string."""
  coverDescription_not_contains: String

  """All values starting with the given string."""
  coverDescription_starts_with: String

  """All values not starting with the given string."""
  coverDescription_not_starts_with: String

  """All values ending with the given string."""
  coverDescription_ends_with: String

  """All values not ending with the given string."""
  coverDescription_not_ends_with: String
  numViews: Int

  """All values that are not equal to given value."""
  numViews_not: Int

  """All values that are contained in given list."""
  numViews_in: [Int!]

  """All values that are not contained in given list."""
  numViews_not_in: [Int!]

  """All values less than the given value."""
  numViews_lt: Int

  """All values less than or equal the given value."""
  numViews_lte: Int

  """All values greater than the given value."""
  numViews_gt: Int

  """All values greater than or equal the given value."""
  numViews_gte: Int
  backImg: String

  """All values that are not equal to given value."""
  backImg_not: String

  """All values that are contained in given list."""
  backImg_in: [String!]

  """All values that are not contained in given list."""
  backImg_not_in: [String!]

  """All values less than the given value."""
  backImg_lt: String

  """All values less than or equal the given value."""
  backImg_lte: String

  """All values greater than the given value."""
  backImg_gt: String

  """All values greater than or equal the given value."""
  backImg_gte: String

  """All values containing the given string."""
  backImg_contains: String

  """All values not containing the given string."""
  backImg_not_contains: String

  """All values starting with the given string."""
  backImg_starts_with: String

  """All values not starting with the given string."""
  backImg_not_starts_with: String

  """All values ending with the given string."""
  backImg_ends_with: String

  """All values not ending with the given string."""
  backImg_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
}

input TopicUpdateInput {
  name: String
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  posts: PostUpdateManyWithoutTopicsInput
  events: EventUpdateManyWithoutTopicInput
}

input TopicUpdateManyDataInput {
  name: String
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
}

input TopicUpdateManyMutationInput {
  name: String
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
}

input TopicUpdateManyWithoutPostsInput {
  create: [TopicCreateWithoutPostsInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  delete: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
  deleteMany: [TopicScalarWhereInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutPostsInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneRequiredWithoutEventsInput {
  create: TopicCreateWithoutEventsInput
  connect: TopicWhereUniqueInput
  update: TopicUpdateWithoutEventsDataInput
  upsert: TopicUpsertWithoutEventsInput
}

input TopicUpdateWithoutEventsDataInput {
  name: String
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  posts: PostUpdateManyWithoutTopicsInput
}

input TopicUpdateWithoutPostsDataInput {
  name: String
  coverImg: String
  coverDescription: String
  numViews: Int
  backImg: String
  icon: String
  events: EventUpdateManyWithoutTopicInput
}

input TopicUpdateWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutPostsDataInput!
}

input TopicUpsertWithoutEventsInput {
  update: TopicUpdateWithoutEventsDataInput!
  create: TopicCreateWithoutEventsInput!
}

input TopicUpsertWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutPostsDataInput!
  create: TopicCreateWithoutPostsInput!
}

input TopicWhereInput {
  """Logical AND on all given filters."""
  AND: [TopicWhereInput!]

  """Logical OR on all given filters."""
  OR: [TopicWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TopicWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coverImg: String

  """All values that are not equal to given value."""
  coverImg_not: String

  """All values that are contained in given list."""
  coverImg_in: [String!]

  """All values that are not contained in given list."""
  coverImg_not_in: [String!]

  """All values less than the given value."""
  coverImg_lt: String

  """All values less than or equal the given value."""
  coverImg_lte: String

  """All values greater than the given value."""
  coverImg_gt: String

  """All values greater than or equal the given value."""
  coverImg_gte: String

  """All values containing the given string."""
  coverImg_contains: String

  """All values not containing the given string."""
  coverImg_not_contains: String

  """All values starting with the given string."""
  coverImg_starts_with: String

  """All values not starting with the given string."""
  coverImg_not_starts_with: String

  """All values ending with the given string."""
  coverImg_ends_with: String

  """All values not ending with the given string."""
  coverImg_not_ends_with: String
  coverDescription: String

  """All values that are not equal to given value."""
  coverDescription_not: String

  """All values that are contained in given list."""
  coverDescription_in: [String!]

  """All values that are not contained in given list."""
  coverDescription_not_in: [String!]

  """All values less than the given value."""
  coverDescription_lt: String

  """All values less than or equal the given value."""
  coverDescription_lte: String

  """All values greater than the given value."""
  coverDescription_gt: String

  """All values greater than or equal the given value."""
  coverDescription_gte: String

  """All values containing the given string."""
  coverDescription_contains: String

  """All values not containing the given string."""
  coverDescription_not_contains: String

  """All values starting with the given string."""
  coverDescription_starts_with: String

  """All values not starting with the given string."""
  coverDescription_not_starts_with: String

  """All values ending with the given string."""
  coverDescription_ends_with: String

  """All values not ending with the given string."""
  coverDescription_not_ends_with: String
  numViews: Int

  """All values that are not equal to given value."""
  numViews_not: Int

  """All values that are contained in given list."""
  numViews_in: [Int!]

  """All values that are not contained in given list."""
  numViews_not_in: [Int!]

  """All values less than the given value."""
  numViews_lt: Int

  """All values less than or equal the given value."""
  numViews_lte: Int

  """All values greater than the given value."""
  numViews_gt: Int

  """All values greater than or equal the given value."""
  numViews_gte: Int
  backImg: String

  """All values that are not equal to given value."""
  backImg_not: String

  """All values that are contained in given list."""
  backImg_in: [String!]

  """All values that are not contained in given list."""
  backImg_not_in: [String!]

  """All values less than the given value."""
  backImg_lt: String

  """All values less than or equal the given value."""
  backImg_lte: String

  """All values greater than the given value."""
  backImg_gt: String

  """All values greater than or equal the given value."""
  backImg_gte: String

  """All values containing the given string."""
  backImg_contains: String

  """All values not containing the given string."""
  backImg_not_contains: String

  """All values starting with the given string."""
  backImg_starts_with: String

  """All values not starting with the given string."""
  backImg_not_starts_with: String

  """All values ending with the given string."""
  backImg_ends_with: String

  """All values not ending with the given string."""
  backImg_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input TopicWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  userType: UserType!
  name: String!
  openId: String!
  alias: String!
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean!
  level: levelType!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userType: UserType!
  name: String!
  openId: String!
  alias: String!
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType!
  posts: PostCreateManyWithoutOwnerInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  userType: UserType!
  name: String!
  openId: String!
  alias: String!
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType!
  posts: PostCreateManyWithoutOwnerInput
}

input UserCreateWithoutPostsInput {
  id: ID
  userType: UserType!
  name: String!
  openId: String!
  alias: String!
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType!
  comments: CommentCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userType_ASC
  userType_DESC
  name_ASC
  name_DESC
  openId_ASC
  openId_DESC
  alias_ASC
  alias_DESC
  profileImg_ASC
  profileImg_DESC
  initialLetter_ASC
  initialLetter_DESC
  isHeavyUser_ASC
  isHeavyUser_DESC
  level_ASC
  level_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  userType: UserType!
  name: String!
  openId: String!
  alias: String!
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean!
  level: levelType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  GITHUB
  GOOGLE
}

input UserUpdateDataInput {
  userType: UserType
  name: String
  openId: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType
  posts: PostUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  userType: UserType
  name: String
  openId: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType
  posts: PostUpdateManyWithoutOwnerInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  userType: UserType
  name: String
  openId: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  userType: UserType
  name: String
  openId: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType
  posts: PostUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutPostsDataInput {
  userType: UserType
  name: String
  openId: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
  level: levelType
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userType: UserType

  """All values that are not equal to given value."""
  userType_not: UserType

  """All values that are contained in given list."""
  userType_in: [UserType!]

  """All values that are not contained in given list."""
  userType_not_in: [UserType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  openId: String

  """All values that are not equal to given value."""
  openId_not: String

  """All values that are contained in given list."""
  openId_in: [String!]

  """All values that are not contained in given list."""
  openId_not_in: [String!]

  """All values less than the given value."""
  openId_lt: String

  """All values less than or equal the given value."""
  openId_lte: String

  """All values greater than the given value."""
  openId_gt: String

  """All values greater than or equal the given value."""
  openId_gte: String

  """All values containing the given string."""
  openId_contains: String

  """All values not containing the given string."""
  openId_not_contains: String

  """All values starting with the given string."""
  openId_starts_with: String

  """All values not starting with the given string."""
  openId_not_starts_with: String

  """All values ending with the given string."""
  openId_ends_with: String

  """All values not ending with the given string."""
  openId_not_ends_with: String
  alias: String

  """All values that are not equal to given value."""
  alias_not: String

  """All values that are contained in given list."""
  alias_in: [String!]

  """All values that are not contained in given list."""
  alias_not_in: [String!]

  """All values less than the given value."""
  alias_lt: String

  """All values less than or equal the given value."""
  alias_lte: String

  """All values greater than the given value."""
  alias_gt: String

  """All values greater than or equal the given value."""
  alias_gte: String

  """All values containing the given string."""
  alias_contains: String

  """All values not containing the given string."""
  alias_not_contains: String

  """All values starting with the given string."""
  alias_starts_with: String

  """All values not starting with the given string."""
  alias_not_starts_with: String

  """All values ending with the given string."""
  alias_ends_with: String

  """All values not ending with the given string."""
  alias_not_ends_with: String
  profileImg: String

  """All values that are not equal to given value."""
  profileImg_not: String

  """All values that are contained in given list."""
  profileImg_in: [String!]

  """All values that are not contained in given list."""
  profileImg_not_in: [String!]

  """All values less than the given value."""
  profileImg_lt: String

  """All values less than or equal the given value."""
  profileImg_lte: String

  """All values greater than the given value."""
  profileImg_gt: String

  """All values greater than or equal the given value."""
  profileImg_gte: String

  """All values containing the given string."""
  profileImg_contains: String

  """All values not containing the given string."""
  profileImg_not_contains: String

  """All values starting with the given string."""
  profileImg_starts_with: String

  """All values not starting with the given string."""
  profileImg_not_starts_with: String

  """All values ending with the given string."""
  profileImg_ends_with: String

  """All values not ending with the given string."""
  profileImg_not_ends_with: String
  initialLetter: String

  """All values that are not equal to given value."""
  initialLetter_not: String

  """All values that are contained in given list."""
  initialLetter_in: [String!]

  """All values that are not contained in given list."""
  initialLetter_not_in: [String!]

  """All values less than the given value."""
  initialLetter_lt: String

  """All values less than or equal the given value."""
  initialLetter_lte: String

  """All values greater than the given value."""
  initialLetter_gt: String

  """All values greater than or equal the given value."""
  initialLetter_gte: String

  """All values containing the given string."""
  initialLetter_contains: String

  """All values not containing the given string."""
  initialLetter_not_contains: String

  """All values starting with the given string."""
  initialLetter_starts_with: String

  """All values not starting with the given string."""
  initialLetter_not_starts_with: String

  """All values ending with the given string."""
  initialLetter_ends_with: String

  """All values not ending with the given string."""
  initialLetter_not_ends_with: String
  isHeavyUser: Boolean

  """All values that are not equal to given value."""
  isHeavyUser_not: Boolean
  level: levelType

  """All values that are not equal to given value."""
  level_not: levelType

  """All values that are contained in given list."""
  level_in: [levelType!]

  """All values that are not contained in given list."""
  level_not_in: [levelType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

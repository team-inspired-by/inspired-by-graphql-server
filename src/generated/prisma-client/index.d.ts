// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bookPost: (where?: BookPostWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  contributor: (where?: ContributorWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  gitPost: (where?: GitPostWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  series: (where?: SeriesWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bookPost: (where: BookPostWhereUniqueInput) => BookPostNullablePromise;
  bookPosts: (args?: {
    where?: BookPostWhereInput;
    orderBy?: BookPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BookPost>;
  bookPostsConnection: (args?: {
    where?: BookPostWhereInput;
    orderBy?: BookPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookPostConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  contributor: (
    where: ContributorWhereUniqueInput
  ) => ContributorNullablePromise;
  contributors: (args?: {
    where?: ContributorWhereInput;
    orderBy?: ContributorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contributor>;
  contributorsConnection: (args?: {
    where?: ContributorWhereInput;
    orderBy?: ContributorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContributorConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  gitPost: (where: GitPostWhereUniqueInput) => GitPostNullablePromise;
  gitPosts: (args?: {
    where?: GitPostWhereInput;
    orderBy?: GitPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GitPost>;
  gitPostsConnection: (args?: {
    where?: GitPostWhereInput;
    orderBy?: GitPostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GitPostConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  series: (where: SeriesWhereUniqueInput) => SeriesNullablePromise;
  serieses: (args?: {
    where?: SeriesWhereInput;
    orderBy?: SeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Series>;
  seriesesConnection: (args?: {
    where?: SeriesWhereInput;
    orderBy?: SeriesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeriesConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicNullablePromise;
  topics: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Topic>;
  topicsConnection: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TopicConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBookPost: (data: BookPostCreateInput) => BookPostPromise;
  updateBookPost: (args: {
    data: BookPostUpdateInput;
    where: BookPostWhereUniqueInput;
  }) => BookPostPromise;
  updateManyBookPosts: (args: {
    data: BookPostUpdateManyMutationInput;
    where?: BookPostWhereInput;
  }) => BatchPayloadPromise;
  upsertBookPost: (args: {
    where: BookPostWhereUniqueInput;
    create: BookPostCreateInput;
    update: BookPostUpdateInput;
  }) => BookPostPromise;
  deleteBookPost: (where: BookPostWhereUniqueInput) => BookPostPromise;
  deleteManyBookPosts: (where?: BookPostWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createContributor: (data: ContributorCreateInput) => ContributorPromise;
  updateContributor: (args: {
    data: ContributorUpdateInput;
    where: ContributorWhereUniqueInput;
  }) => ContributorPromise;
  updateManyContributors: (args: {
    data: ContributorUpdateManyMutationInput;
    where?: ContributorWhereInput;
  }) => BatchPayloadPromise;
  upsertContributor: (args: {
    where: ContributorWhereUniqueInput;
    create: ContributorCreateInput;
    update: ContributorUpdateInput;
  }) => ContributorPromise;
  deleteContributor: (where: ContributorWhereUniqueInput) => ContributorPromise;
  deleteManyContributors: (
    where?: ContributorWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createGitPost: (data: GitPostCreateInput) => GitPostPromise;
  updateGitPost: (args: {
    data: GitPostUpdateInput;
    where: GitPostWhereUniqueInput;
  }) => GitPostPromise;
  updateManyGitPosts: (args: {
    data: GitPostUpdateManyMutationInput;
    where?: GitPostWhereInput;
  }) => BatchPayloadPromise;
  upsertGitPost: (args: {
    where: GitPostWhereUniqueInput;
    create: GitPostCreateInput;
    update: GitPostUpdateInput;
  }) => GitPostPromise;
  deleteGitPost: (where: GitPostWhereUniqueInput) => GitPostPromise;
  deleteManyGitPosts: (where?: GitPostWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSeries: (data: SeriesCreateInput) => SeriesPromise;
  updateSeries: (args: {
    data: SeriesUpdateInput;
    where: SeriesWhereUniqueInput;
  }) => SeriesPromise;
  updateManySerieses: (args: {
    data: SeriesUpdateManyMutationInput;
    where?: SeriesWhereInput;
  }) => BatchPayloadPromise;
  upsertSeries: (args: {
    where: SeriesWhereUniqueInput;
    create: SeriesCreateInput;
    update: SeriesUpdateInput;
  }) => SeriesPromise;
  deleteSeries: (where: SeriesWhereUniqueInput) => SeriesPromise;
  deleteManySerieses: (where?: SeriesWhereInput) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (args: {
    data: TopicUpdateInput;
    where: TopicWhereUniqueInput;
  }) => TopicPromise;
  updateManyTopics: (args: {
    data: TopicUpdateManyMutationInput;
    where?: TopicWhereInput;
  }) => BatchPayloadPromise;
  upsertTopic: (args: {
    where: TopicWhereUniqueInput;
    create: TopicCreateInput;
    update: TopicUpdateInput;
  }) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bookPost: (
    where?: BookPostSubscriptionWhereInput
  ) => BookPostSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  contributor: (
    where?: ContributorSubscriptionWhereInput
  ) => ContributorSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  gitPost: (
    where?: GitPostSubscriptionWhereInput
  ) => GitPostSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  series: (
    where?: SeriesSubscriptionWhereInput
  ) => SeriesSubscriptionPayloadSubscription;
  topic: (
    where?: TopicSubscriptionWhereInput
  ) => TopicSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FileType = "IMAGE" | "PDF" | "ETC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "coverImg_ASC"
  | "coverImg_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "numViews_ASC"
  | "numViews_DESC"
  | "numLikes_ASC"
  | "numLikes_DESC"
  | "numComments_ASC"
  | "numComments_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContributorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "contributedAt_ASC"
  | "contributedAt_DESC"
  | "correctionRange_ASC"
  | "correctionRange_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userType_ASC"
  | "userType_DESC"
  | "name_ASC"
  | "name_DESC"
  | "openId_ASC"
  | "openId_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "profileImg_ASC"
  | "profileImg_DESC"
  | "initialLetter_ASC"
  | "initialLetter_DESC"
  | "isHeavyUser_ASC"
  | "isHeavyUser_DESC"
  | "level_ASC"
  | "level_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContributorType = "TYPO" | "INFO_CORRECTION" | "INFO_ADDTION";

export type SeriesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "numViews_ASC"
  | "numViews_DESC"
  | "numLikes_ASC"
  | "numLikes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bookName_ASC"
  | "bookName_DESC"
  | "bookPublisher_ASC"
  | "bookPublisher_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserType = "GITHUB" | "GOOGLE";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "coverImg_ASC"
  | "coverImg_DESC"
  | "coverDescription_ASC"
  | "coverDescription_DESC"
  | "numViews_ASC"
  | "numViews_DESC"
  | "backImg_ASC"
  | "backImg_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "mainImg_ASC"
  | "mainImg_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LinkedStore = "YES24" | "KYOBO";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "size_ASC"
  | "size_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitPostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitId_ASC"
  | "gitId_DESC"
  | "gitTitle_ASC"
  | "gitTitle_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Category = "GENERAL" | "GIT" | "BOOK";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type levelType = "VISITOR" | "MEMBER" | "WRITER" | "MANAGER";

export interface EventUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  mainImg?: Maybe<String>;
}

export type BookPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookPostUpdateWithoutPostDataInput {
  bookName?: Maybe<String>;
  bookPublisher?: Maybe<String>;
  LinkedStore?: Maybe<BookPostUpdateLinkedStoreInput>;
}

export interface SeriesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  numViews?: Maybe<Int>;
  numViews_not?: Maybe<Int>;
  numViews_in?: Maybe<Int[] | Int>;
  numViews_not_in?: Maybe<Int[] | Int>;
  numViews_lt?: Maybe<Int>;
  numViews_lte?: Maybe<Int>;
  numViews_gt?: Maybe<Int>;
  numViews_gte?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numLikes_not?: Maybe<Int>;
  numLikes_in?: Maybe<Int[] | Int>;
  numLikes_not_in?: Maybe<Int[] | Int>;
  numLikes_lt?: Maybe<Int>;
  numLikes_lte?: Maybe<Int>;
  numLikes_gt?: Maybe<Int>;
  numLikes_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
  OR?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
  NOT?: Maybe<SeriesWhereInput[] | SeriesWhereInput>;
}

export interface BookPostUpdateLinkedStoreInput {
  set?: Maybe<LinkedStore[] | LinkedStore>;
}

export interface GitPostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  post?: Maybe<PostWhereInput>;
  gitId?: Maybe<String>;
  gitId_not?: Maybe<String>;
  gitId_in?: Maybe<String[] | String>;
  gitId_not_in?: Maybe<String[] | String>;
  gitId_lt?: Maybe<String>;
  gitId_lte?: Maybe<String>;
  gitId_gt?: Maybe<String>;
  gitId_gte?: Maybe<String>;
  gitId_contains?: Maybe<String>;
  gitId_not_contains?: Maybe<String>;
  gitId_starts_with?: Maybe<String>;
  gitId_not_starts_with?: Maybe<String>;
  gitId_ends_with?: Maybe<String>;
  gitId_not_ends_with?: Maybe<String>;
  gitTitle?: Maybe<String>;
  gitTitle_not?: Maybe<String>;
  gitTitle_in?: Maybe<String[] | String>;
  gitTitle_not_in?: Maybe<String[] | String>;
  gitTitle_lt?: Maybe<String>;
  gitTitle_lte?: Maybe<String>;
  gitTitle_gt?: Maybe<String>;
  gitTitle_gte?: Maybe<String>;
  gitTitle_contains?: Maybe<String>;
  gitTitle_not_contains?: Maybe<String>;
  gitTitle_starts_with?: Maybe<String>;
  gitTitle_not_starts_with?: Maybe<String>;
  gitTitle_ends_with?: Maybe<String>;
  gitTitle_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GitPostWhereInput[] | GitPostWhereInput>;
  OR?: Maybe<GitPostWhereInput[] | GitPostWhereInput>;
  NOT?: Maybe<GitPostWhereInput[] | GitPostWhereInput>;
}

export interface BookPostUpsertWithoutPostInput {
  update: BookPostUpdateWithoutPostDataInput;
  create: BookPostCreateWithoutPostInput;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  topic?: Maybe<TopicWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  mainImg?: Maybe<String>;
  mainImg_not?: Maybe<String>;
  mainImg_in?: Maybe<String[] | String>;
  mainImg_not_in?: Maybe<String[] | String>;
  mainImg_lt?: Maybe<String>;
  mainImg_lte?: Maybe<String>;
  mainImg_gt?: Maybe<String>;
  mainImg_gte?: Maybe<String>;
  mainImg_contains?: Maybe<String>;
  mainImg_not_contains?: Maybe<String>;
  mainImg_starts_with?: Maybe<String>;
  mainImg_not_starts_with?: Maybe<String>;
  mainImg_ends_with?: Maybe<String>;
  mainImg_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface SeriesUpdateOneWithoutPostsInput {
  create?: Maybe<SeriesCreateWithoutPostsInput>;
  update?: Maybe<SeriesUpdateWithoutPostsDataInput>;
  upsert?: Maybe<SeriesUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface TopicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  coverImg?: Maybe<String>;
  coverImg_not?: Maybe<String>;
  coverImg_in?: Maybe<String[] | String>;
  coverImg_not_in?: Maybe<String[] | String>;
  coverImg_lt?: Maybe<String>;
  coverImg_lte?: Maybe<String>;
  coverImg_gt?: Maybe<String>;
  coverImg_gte?: Maybe<String>;
  coverImg_contains?: Maybe<String>;
  coverImg_not_contains?: Maybe<String>;
  coverImg_starts_with?: Maybe<String>;
  coverImg_not_starts_with?: Maybe<String>;
  coverImg_ends_with?: Maybe<String>;
  coverImg_not_ends_with?: Maybe<String>;
  coverDescription?: Maybe<String>;
  coverDescription_not?: Maybe<String>;
  coverDescription_in?: Maybe<String[] | String>;
  coverDescription_not_in?: Maybe<String[] | String>;
  coverDescription_lt?: Maybe<String>;
  coverDescription_lte?: Maybe<String>;
  coverDescription_gt?: Maybe<String>;
  coverDescription_gte?: Maybe<String>;
  coverDescription_contains?: Maybe<String>;
  coverDescription_not_contains?: Maybe<String>;
  coverDescription_starts_with?: Maybe<String>;
  coverDescription_not_starts_with?: Maybe<String>;
  coverDescription_ends_with?: Maybe<String>;
  coverDescription_not_ends_with?: Maybe<String>;
  numViews?: Maybe<Int>;
  numViews_not?: Maybe<Int>;
  numViews_in?: Maybe<Int[] | Int>;
  numViews_not_in?: Maybe<Int[] | Int>;
  numViews_lt?: Maybe<Int>;
  numViews_lte?: Maybe<Int>;
  numViews_gt?: Maybe<Int>;
  numViews_gte?: Maybe<Int>;
  backImg?: Maybe<String>;
  backImg_not?: Maybe<String>;
  backImg_in?: Maybe<String[] | String>;
  backImg_not_in?: Maybe<String[] | String>;
  backImg_lt?: Maybe<String>;
  backImg_lte?: Maybe<String>;
  backImg_gt?: Maybe<String>;
  backImg_gte?: Maybe<String>;
  backImg_contains?: Maybe<String>;
  backImg_not_contains?: Maybe<String>;
  backImg_starts_with?: Maybe<String>;
  backImg_not_starts_with?: Maybe<String>;
  backImg_ends_with?: Maybe<String>;
  backImg_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  OR?: Maybe<TopicWhereInput[] | TopicWhereInput>;
  NOT?: Maybe<TopicWhereInput[] | TopicWhereInput>;
}

export interface BookPostUpdateInput {
  post?: Maybe<PostUpdateOneRequiredWithoutBookPostsInput>;
  bookName?: Maybe<String>;
  bookPublisher?: Maybe<String>;
  LinkedStore?: Maybe<BookPostUpdateLinkedStoreInput>;
}

export interface TopicUpdateWithoutEventsDataInput {
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutTopicsInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface PostUpdateOneRequiredWithoutBookPostsInput {
  create?: Maybe<PostCreateWithoutBookPostsInput>;
  update?: Maybe<PostUpdateWithoutBookPostsDataInput>;
  upsert?: Maybe<PostUpsertWithoutBookPostsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface SeriesUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
}

export interface PostUpdateWithoutBookPostsDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface TopicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TopicWhereInput>;
  AND?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  OR?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
  NOT?: Maybe<TopicSubscriptionWhereInput[] | TopicSubscriptionWhereInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  userType?: Maybe<UserType>;
  name?: Maybe<String>;
  openId?: Maybe<String>;
  alias?: Maybe<String>;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level?: Maybe<levelType>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CommentUpdateWithoutAuthorDataInput {
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  contents?: Maybe<String>;
  replies?: Maybe<CommentUpdateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export interface BookPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookPostWhereInput>;
  AND?: Maybe<
    BookPostSubscriptionWhereInput[] | BookPostSubscriptionWhereInput
  >;
  OR?: Maybe<BookPostSubscriptionWhereInput[] | BookPostSubscriptionWhereInput>;
  NOT?: Maybe<
    BookPostSubscriptionWhereInput[] | BookPostSubscriptionWhereInput
  >;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface ContributorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  contributedAt?: Maybe<DateTimeInput>;
  contributedAt_not?: Maybe<DateTimeInput>;
  contributedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contributedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  contributedAt_lt?: Maybe<DateTimeInput>;
  contributedAt_lte?: Maybe<DateTimeInput>;
  contributedAt_gt?: Maybe<DateTimeInput>;
  contributedAt_gte?: Maybe<DateTimeInput>;
  correctionRange?: Maybe<String>;
  correctionRange_not?: Maybe<String>;
  correctionRange_in?: Maybe<String[] | String>;
  correctionRange_not_in?: Maybe<String[] | String>;
  correctionRange_lt?: Maybe<String>;
  correctionRange_lte?: Maybe<String>;
  correctionRange_gt?: Maybe<String>;
  correctionRange_gte?: Maybe<String>;
  correctionRange_contains?: Maybe<String>;
  correctionRange_not_contains?: Maybe<String>;
  correctionRange_starts_with?: Maybe<String>;
  correctionRange_not_starts_with?: Maybe<String>;
  correctionRange_ends_with?: Maybe<String>;
  correctionRange_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
  OR?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
  NOT?: Maybe<ContributorWhereInput[] | ContributorWhereInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  userType?: Maybe<UserType>;
  name?: Maybe<String>;
  openId?: Maybe<String>;
  alias?: Maybe<String>;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level?: Maybe<levelType>;
}

export interface TopicUpdateManyWithoutPostsInput {
  create?: Maybe<TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput>;
  delete?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  set?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  disconnect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
  update?: Maybe<
    | TopicUpdateWithWhereUniqueWithoutPostsInput[]
    | TopicUpdateWithWhereUniqueWithoutPostsInput
  >;
  upsert?: Maybe<
    | TopicUpsertWithWhereUniqueWithoutPostsInput[]
    | TopicUpsertWithWhereUniqueWithoutPostsInput
  >;
  deleteMany?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  updateMany?: Maybe<
    TopicUpdateManyWithWhereNestedInput[] | TopicUpdateManyWithWhereNestedInput
  >;
}

export interface TopicUpdateManyMutationInput {
  name?: Maybe<String>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface TopicUpdateWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutPostsDataInput;
}

export interface TopicUpdateInput {
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutTopicsInput>;
  events?: Maybe<EventUpdateManyWithoutTopicInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface TopicUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutTopicInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface SeriesUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
}

export interface EventUpdateManyWithoutTopicInput {
  create?: Maybe<EventCreateWithoutTopicInput[] | EventCreateWithoutTopicInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutTopicInput[]
    | EventUpdateWithWhereUniqueWithoutTopicInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutTopicInput[]
    | EventUpsertWithWhereUniqueWithoutTopicInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpsertWithWhereUniqueWithoutSeriesInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutSeriesDataInput;
  create: PostCreateWithoutSeriesInput;
}

export interface EventUpdateWithWhereUniqueWithoutTopicInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutTopicDataInput;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface EventUpdateWithoutTopicDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  mainImg?: Maybe<String>;
}

export interface PostUpdateWithWhereUniqueWithoutSeriesInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutSeriesDataInput;
}

export interface EventUpsertWithWhereUniqueWithoutTopicInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutTopicDataInput;
  create: EventCreateWithoutTopicInput;
}

export interface SeriesUpdateInput {
  name?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutSeriesInput>;
  description?: Maybe<String>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  mainImg?: Maybe<String>;
  mainImg_not?: Maybe<String>;
  mainImg_in?: Maybe<String[] | String>;
  mainImg_not_in?: Maybe<String[] | String>;
  mainImg_lt?: Maybe<String>;
  mainImg_lte?: Maybe<String>;
  mainImg_gt?: Maybe<String>;
  mainImg_gte?: Maybe<String>;
  mainImg_contains?: Maybe<String>;
  mainImg_not_contains?: Maybe<String>;
  mainImg_starts_with?: Maybe<String>;
  mainImg_not_starts_with?: Maybe<String>;
  mainImg_ends_with?: Maybe<String>;
  mainImg_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface PostCreateWithoutSeriesInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  bookPosts: BookPostCreateOneWithoutPostInput;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface SeriesCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  posts?: Maybe<PostCreateManyWithoutSeriesInput>;
  description: String;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneInput;
  alias: String;
  type?: Maybe<FileCreatetypeInput>;
  size: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TopicUpsertWithWhereUniqueWithoutPostsInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutPostsDataInput;
  create: TopicCreateWithoutPostsInput;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  bookPosts: BookPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface TopicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  coverImg?: Maybe<String>;
  coverImg_not?: Maybe<String>;
  coverImg_in?: Maybe<String[] | String>;
  coverImg_not_in?: Maybe<String[] | String>;
  coverImg_lt?: Maybe<String>;
  coverImg_lte?: Maybe<String>;
  coverImg_gt?: Maybe<String>;
  coverImg_gte?: Maybe<String>;
  coverImg_contains?: Maybe<String>;
  coverImg_not_contains?: Maybe<String>;
  coverImg_starts_with?: Maybe<String>;
  coverImg_not_starts_with?: Maybe<String>;
  coverImg_ends_with?: Maybe<String>;
  coverImg_not_ends_with?: Maybe<String>;
  coverDescription?: Maybe<String>;
  coverDescription_not?: Maybe<String>;
  coverDescription_in?: Maybe<String[] | String>;
  coverDescription_not_in?: Maybe<String[] | String>;
  coverDescription_lt?: Maybe<String>;
  coverDescription_lte?: Maybe<String>;
  coverDescription_gt?: Maybe<String>;
  coverDescription_gte?: Maybe<String>;
  coverDescription_contains?: Maybe<String>;
  coverDescription_not_contains?: Maybe<String>;
  coverDescription_starts_with?: Maybe<String>;
  coverDescription_not_starts_with?: Maybe<String>;
  coverDescription_ends_with?: Maybe<String>;
  coverDescription_not_ends_with?: Maybe<String>;
  numViews?: Maybe<Int>;
  numViews_not?: Maybe<Int>;
  numViews_in?: Maybe<Int[] | Int>;
  numViews_not_in?: Maybe<Int[] | Int>;
  numViews_lt?: Maybe<Int>;
  numViews_lte?: Maybe<Int>;
  numViews_gt?: Maybe<Int>;
  numViews_gte?: Maybe<Int>;
  backImg?: Maybe<String>;
  backImg_not?: Maybe<String>;
  backImg_in?: Maybe<String[] | String>;
  backImg_not_in?: Maybe<String[] | String>;
  backImg_lt?: Maybe<String>;
  backImg_lte?: Maybe<String>;
  backImg_gt?: Maybe<String>;
  backImg_gte?: Maybe<String>;
  backImg_contains?: Maybe<String>;
  backImg_not_contains?: Maybe<String>;
  backImg_starts_with?: Maybe<String>;
  backImg_not_starts_with?: Maybe<String>;
  backImg_ends_with?: Maybe<String>;
  backImg_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  OR?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
  NOT?: Maybe<TopicScalarWhereInput[] | TopicScalarWhereInput>;
}

export type SeriesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface PostUpdateWithoutGitPostsDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface TopicUpdateManyDataInput {
  name?: Maybe<String>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface GitPostUpdateInput {
  post?: Maybe<PostUpdateOneRequiredWithoutGitPostsInput>;
  gitId?: Maybe<String>;
  gitAuthor?: Maybe<GitPostUpdategitAuthorInput>;
  gitTitle?: Maybe<String>;
}

export interface GitPostUpdateOneRequiredWithoutPostInput {
  create?: Maybe<GitPostCreateWithoutPostInput>;
  update?: Maybe<GitPostUpdateWithoutPostDataInput>;
  upsert?: Maybe<GitPostUpsertWithoutPostInput>;
  connect?: Maybe<GitPostWhereUniqueInput>;
}

export interface PostCreateWithoutGitPostsInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  bookPosts: BookPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface GitPostUpdateWithoutPostDataInput {
  gitId?: Maybe<String>;
  gitAuthor?: Maybe<GitPostUpdategitAuthorInput>;
  gitTitle?: Maybe<String>;
}

export interface GitPostCreateInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutGitPostsInput;
  gitId: String;
  gitAuthor?: Maybe<GitPostCreategitAuthorInput>;
  gitTitle: String;
}

export interface GitPostUpdategitAuthorInput {
  set?: Maybe<String[] | String>;
}

export interface FileUpdateManyMutationInput {
  alias?: Maybe<String>;
  type?: Maybe<FileUpdatetypeInput>;
  size?: Maybe<String>;
}

export interface GitPostUpsertWithoutPostInput {
  update: GitPostUpdateWithoutPostDataInput;
  create: GitPostCreateWithoutPostInput;
}

export interface FileUpdateInput {
  author?: Maybe<UserUpdateOneRequiredInput>;
  alias?: Maybe<String>;
  type?: Maybe<FileUpdatetypeInput>;
  size?: Maybe<String>;
}

export interface BookPostUpdateOneRequiredWithoutPostInput {
  create?: Maybe<BookPostCreateWithoutPostInput>;
  update?: Maybe<BookPostUpdateWithoutPostDataInput>;
  upsert?: Maybe<BookPostUpsertWithoutPostInput>;
  connect?: Maybe<BookPostWhereUniqueInput>;
}

export interface PostCreateOneWithoutBookPostsInput {
  create?: Maybe<PostCreateWithoutBookPostsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface BookPostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  post?: Maybe<PostWhereInput>;
  bookName?: Maybe<String>;
  bookName_not?: Maybe<String>;
  bookName_in?: Maybe<String[] | String>;
  bookName_not_in?: Maybe<String[] | String>;
  bookName_lt?: Maybe<String>;
  bookName_lte?: Maybe<String>;
  bookName_gt?: Maybe<String>;
  bookName_gte?: Maybe<String>;
  bookName_contains?: Maybe<String>;
  bookName_not_contains?: Maybe<String>;
  bookName_starts_with?: Maybe<String>;
  bookName_not_starts_with?: Maybe<String>;
  bookName_ends_with?: Maybe<String>;
  bookName_not_ends_with?: Maybe<String>;
  bookPublisher?: Maybe<String>;
  bookPublisher_not?: Maybe<String>;
  bookPublisher_in?: Maybe<String[] | String>;
  bookPublisher_not_in?: Maybe<String[] | String>;
  bookPublisher_lt?: Maybe<String>;
  bookPublisher_lte?: Maybe<String>;
  bookPublisher_gt?: Maybe<String>;
  bookPublisher_gte?: Maybe<String>;
  bookPublisher_contains?: Maybe<String>;
  bookPublisher_not_contains?: Maybe<String>;
  bookPublisher_starts_with?: Maybe<String>;
  bookPublisher_not_starts_with?: Maybe<String>;
  bookPublisher_ends_with?: Maybe<String>;
  bookPublisher_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookPostWhereInput[] | BookPostWhereInput>;
  OR?: Maybe<BookPostWhereInput[] | BookPostWhereInput>;
  NOT?: Maybe<BookPostWhereInput[] | BookPostWhereInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  mainImg?: Maybe<String>;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface TopicUpsertWithoutEventsInput {
  update: TopicUpdateWithoutEventsDataInput;
  create: TopicCreateWithoutEventsInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpsertWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutTopicsDataInput;
  create: PostCreateWithoutTopicsInput;
}

export interface TopicCreateManyWithoutPostsInput {
  create?: Maybe<TopicCreateWithoutPostsInput[] | TopicCreateWithoutPostsInput>;
  connect?: Maybe<TopicWhereUniqueInput[] | TopicWhereUniqueInput>;
}

export interface PostUpdateWithoutTopicsDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface EventCreateManyWithoutTopicInput {
  create?: Maybe<EventCreateWithoutTopicInput[] | EventCreateWithoutTopicInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface SeriesUpsertWithoutPostsInput {
  update: SeriesUpdateWithoutPostsDataInput;
  create: SeriesCreateWithoutPostsInput;
}

export interface GitPostCreateOneWithoutPostInput {
  create?: Maybe<GitPostCreateWithoutPostInput>;
  connect?: Maybe<GitPostWhereUniqueInput>;
}

export interface PostUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface GitPostCreategitAuthorInput {
  set?: Maybe<String[] | String>;
}

export interface PostUpdatesummaryInput {
  set?: Maybe<String[] | String>;
}

export interface BookPostCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  bookName: String;
  bookPublisher: String;
  LinkedStore?: Maybe<BookPostCreateLinkedStoreInput>;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface SeriesCreateOneWithoutPostsInput {
  create?: Maybe<SeriesCreateWithoutPostsInput>;
  connect?: Maybe<SeriesWhereUniqueInput>;
}

export interface CommentUpdateManyWithoutRepliesInput {
  create?: Maybe<
    CommentCreateWithoutRepliesInput[] | CommentCreateWithoutRepliesInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutRepliesInput[]
    | CommentUpdateWithWhereUniqueWithoutRepliesInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutRepliesInput[]
    | CommentUpsertWithWhereUniqueWithoutRepliesInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface PostCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface CommentUpdateWithWhereUniqueWithoutRepliesInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutRepliesDataInput;
}

export interface CommentCreateManyWithoutRepliesInput {
  create?: Maybe<
    CommentCreateWithoutRepliesInput[] | CommentCreateWithoutRepliesInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutRepliesDataInput {
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  contents?: Maybe<String>;
  likes?: Maybe<Int>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostCreateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  userType?: Maybe<UserType>;
  name?: Maybe<String>;
  openId?: Maybe<String>;
  alias?: Maybe<String>;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level?: Maybe<levelType>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface PostUpdateManyWithoutOwnerInput {
  create?: Maybe<PostCreateWithoutOwnerInput[] | PostCreateWithoutOwnerInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutOwnerInput[]
    | PostUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutOwnerInput[]
    | PostUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PostUpdateWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutOwnerDataInput;
}

export interface GitPostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GitPostWhereInput>;
  AND?: Maybe<GitPostSubscriptionWhereInput[] | GitPostSubscriptionWhereInput>;
  OR?: Maybe<GitPostSubscriptionWhereInput[] | GitPostSubscriptionWhereInput>;
  NOT?: Maybe<GitPostSubscriptionWhereInput[] | GitPostSubscriptionWhereInput>;
}

export interface PostUpdateWithoutOwnerDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface ContributorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContributorWhereInput>;
  AND?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContributorSubscriptionWhereInput[] | ContributorSubscriptionWhereInput
  >;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  post?: Maybe<PostWhereInput>;
  author?: Maybe<UserWhereInput>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  replies_every?: Maybe<CommentWhereInput>;
  replies_some?: Maybe<CommentWhereInput>;
  replies_none?: Maybe<CommentWhereInput>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface UserUpdateInput {
  userType?: Maybe<UserType>;
  name?: Maybe<String>;
  openId?: Maybe<String>;
  alias?: Maybe<String>;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level?: Maybe<levelType>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
}

export interface CommentUpdateWithoutPostDataInput {
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  contents?: Maybe<String>;
  replies?: Maybe<CommentUpdateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export interface TopicCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  posts?: Maybe<PostCreateManyWithoutTopicsInput>;
  events?: Maybe<EventCreateManyWithoutTopicInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  coverImg?: Maybe<String>;
  coverImg_not?: Maybe<String>;
  coverImg_in?: Maybe<String[] | String>;
  coverImg_not_in?: Maybe<String[] | String>;
  coverImg_lt?: Maybe<String>;
  coverImg_lte?: Maybe<String>;
  coverImg_gt?: Maybe<String>;
  coverImg_gte?: Maybe<String>;
  coverImg_contains?: Maybe<String>;
  coverImg_not_contains?: Maybe<String>;
  coverImg_starts_with?: Maybe<String>;
  coverImg_not_starts_with?: Maybe<String>;
  coverImg_ends_with?: Maybe<String>;
  coverImg_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  topics_every?: Maybe<TopicWhereInput>;
  topics_some?: Maybe<TopicWhereInput>;
  topics_none?: Maybe<TopicWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  gitPosts?: Maybe<GitPostWhereInput>;
  bookPosts?: Maybe<BookPostWhereInput>;
  series?: Maybe<SeriesWhereInput>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  numViews?: Maybe<Int>;
  numViews_not?: Maybe<Int>;
  numViews_in?: Maybe<Int[] | Int>;
  numViews_not_in?: Maybe<Int[] | Int>;
  numViews_lt?: Maybe<Int>;
  numViews_lte?: Maybe<Int>;
  numViews_gt?: Maybe<Int>;
  numViews_gte?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numLikes_not?: Maybe<Int>;
  numLikes_in?: Maybe<Int[] | Int>;
  numLikes_not_in?: Maybe<Int[] | Int>;
  numLikes_lt?: Maybe<Int>;
  numLikes_lte?: Maybe<Int>;
  numLikes_gt?: Maybe<Int>;
  numLikes_gte?: Maybe<Int>;
  numComments?: Maybe<Int>;
  numComments_not?: Maybe<Int>;
  numComments_in?: Maybe<Int[] | Int>;
  numComments_not_in?: Maybe<Int[] | Int>;
  numComments_lt?: Maybe<Int>;
  numComments_lte?: Maybe<Int>;
  numComments_gt?: Maybe<Int>;
  numComments_gte?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface PostUpdateManyWithoutSeriesInput {
  create?: Maybe<PostCreateWithoutSeriesInput[] | PostCreateWithoutSeriesInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutSeriesInput[]
    | PostUpdateWithWhereUniqueWithoutSeriesInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutSeriesInput[]
    | PostUpsertWithWhereUniqueWithoutSeriesInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface PostCreateManyWithoutSeriesInput {
  create?: Maybe<PostCreateWithoutSeriesInput[] | PostCreateWithoutSeriesInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface CommentUpdateManyDataInput {
  contents?: Maybe<String>;
  likes?: Maybe<Int>;
}

export interface PostUpdateInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  series?: Maybe<SeriesUpdateOneWithoutPostsInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface PostUpsertWithWhereUniqueWithoutOwnerInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutOwnerDataInput;
  create: PostCreateWithoutOwnerInput;
}

export interface PostUpsertWithoutGitPostsInput {
  update: PostUpdateWithoutGitPostsDataInput;
  create: PostCreateWithoutGitPostsInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  coverImg?: Maybe<String>;
  coverImg_not?: Maybe<String>;
  coverImg_in?: Maybe<String[] | String>;
  coverImg_not_in?: Maybe<String[] | String>;
  coverImg_lt?: Maybe<String>;
  coverImg_lte?: Maybe<String>;
  coverImg_gt?: Maybe<String>;
  coverImg_gte?: Maybe<String>;
  coverImg_contains?: Maybe<String>;
  coverImg_not_contains?: Maybe<String>;
  coverImg_starts_with?: Maybe<String>;
  coverImg_not_starts_with?: Maybe<String>;
  coverImg_ends_with?: Maybe<String>;
  coverImg_not_ends_with?: Maybe<String>;
  contents?: Maybe<String>;
  contents_not?: Maybe<String>;
  contents_in?: Maybe<String[] | String>;
  contents_not_in?: Maybe<String[] | String>;
  contents_lt?: Maybe<String>;
  contents_lte?: Maybe<String>;
  contents_gt?: Maybe<String>;
  contents_gte?: Maybe<String>;
  contents_contains?: Maybe<String>;
  contents_not_contains?: Maybe<String>;
  contents_starts_with?: Maybe<String>;
  contents_not_starts_with?: Maybe<String>;
  contents_ends_with?: Maybe<String>;
  contents_not_ends_with?: Maybe<String>;
  numViews?: Maybe<Int>;
  numViews_not?: Maybe<Int>;
  numViews_in?: Maybe<Int[] | Int>;
  numViews_not_in?: Maybe<Int[] | Int>;
  numViews_lt?: Maybe<Int>;
  numViews_lte?: Maybe<Int>;
  numViews_gt?: Maybe<Int>;
  numViews_gte?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numLikes_not?: Maybe<Int>;
  numLikes_in?: Maybe<Int[] | Int>;
  numLikes_not_in?: Maybe<Int[] | Int>;
  numLikes_lt?: Maybe<Int>;
  numLikes_lte?: Maybe<Int>;
  numLikes_gt?: Maybe<Int>;
  numLikes_gte?: Maybe<Int>;
  numComments?: Maybe<Int>;
  numComments_not?: Maybe<Int>;
  numComments_in?: Maybe<Int[] | Int>;
  numComments_not_in?: Maybe<Int[] | Int>;
  numComments_lt?: Maybe<Int>;
  numComments_lte?: Maybe<Int>;
  numComments_gt?: Maybe<Int>;
  numComments_gte?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  isPrivate_not?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export type TopicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface FileCreatetypeInput {
  set?: Maybe<FileType[] | FileType>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface PostCreateWithoutBookPostsInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutRepliesInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutRepliesDataInput;
  create: CommentCreateWithoutRepliesInput;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutCommentsInput;
  contents: String;
  replies?: Maybe<CommentCreateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface TopicCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  events?: Maybe<EventCreateManyWithoutTopicInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface GitPostCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  gitId: String;
  gitAuthor?: Maybe<GitPostCreategitAuthorInput>;
  gitTitle: String;
}

export interface PostUpsertWithoutBookPostsInput {
  update: PostUpdateWithoutBookPostsDataInput;
  create: PostCreateWithoutBookPostsInput;
}

export interface BookPostCreateLinkedStoreInput {
  set?: Maybe<LinkedStore[] | LinkedStore>;
}

export interface BookPostUpdateManyMutationInput {
  bookName?: Maybe<String>;
  bookPublisher?: Maybe<String>;
  LinkedStore?: Maybe<BookPostUpdateLinkedStoreInput>;
}

export interface PostCreatesummaryInput {
  set?: Maybe<String[] | String>;
}

export interface PostUpdateWithWhereUniqueWithoutTopicsInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutTopicsDataInput;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  userType: UserType;
  name: String;
  openId: String;
  alias: String;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level: levelType;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
}

export interface PostUpdateManyWithoutTopicsInput {
  create?: Maybe<PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutTopicsInput[]
    | PostUpdateWithWhereUniqueWithoutTopicsInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutTopicsInput[]
    | PostUpsertWithWhereUniqueWithoutTopicsInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  author: UserCreateOneWithoutCommentsInput;
  contents: String;
  replies?: Maybe<CommentCreateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutCommentsInput;
  author: UserCreateOneWithoutCommentsInput;
  contents: String;
  replies?: Maybe<CommentCreateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpdateInput {
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  contents?: Maybe<String>;
  replies?: Maybe<CommentUpdateManyWithoutRepliesInput>;
  likes?: Maybe<Int>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userType?: Maybe<UserType>;
  userType_not?: Maybe<UserType>;
  userType_in?: Maybe<UserType[] | UserType>;
  userType_not_in?: Maybe<UserType[] | UserType>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  openId?: Maybe<String>;
  openId_not?: Maybe<String>;
  openId_in?: Maybe<String[] | String>;
  openId_not_in?: Maybe<String[] | String>;
  openId_lt?: Maybe<String>;
  openId_lte?: Maybe<String>;
  openId_gt?: Maybe<String>;
  openId_gte?: Maybe<String>;
  openId_contains?: Maybe<String>;
  openId_not_contains?: Maybe<String>;
  openId_starts_with?: Maybe<String>;
  openId_not_starts_with?: Maybe<String>;
  openId_ends_with?: Maybe<String>;
  openId_not_ends_with?: Maybe<String>;
  alias?: Maybe<String>;
  alias_not?: Maybe<String>;
  alias_in?: Maybe<String[] | String>;
  alias_not_in?: Maybe<String[] | String>;
  alias_lt?: Maybe<String>;
  alias_lte?: Maybe<String>;
  alias_gt?: Maybe<String>;
  alias_gte?: Maybe<String>;
  alias_contains?: Maybe<String>;
  alias_not_contains?: Maybe<String>;
  alias_starts_with?: Maybe<String>;
  alias_not_starts_with?: Maybe<String>;
  alias_ends_with?: Maybe<String>;
  alias_not_ends_with?: Maybe<String>;
  profileImg?: Maybe<String>;
  profileImg_not?: Maybe<String>;
  profileImg_in?: Maybe<String[] | String>;
  profileImg_not_in?: Maybe<String[] | String>;
  profileImg_lt?: Maybe<String>;
  profileImg_lte?: Maybe<String>;
  profileImg_gt?: Maybe<String>;
  profileImg_gte?: Maybe<String>;
  profileImg_contains?: Maybe<String>;
  profileImg_not_contains?: Maybe<String>;
  profileImg_starts_with?: Maybe<String>;
  profileImg_not_starts_with?: Maybe<String>;
  profileImg_ends_with?: Maybe<String>;
  profileImg_not_ends_with?: Maybe<String>;
  initialLetter?: Maybe<String>;
  initialLetter_not?: Maybe<String>;
  initialLetter_in?: Maybe<String[] | String>;
  initialLetter_not_in?: Maybe<String[] | String>;
  initialLetter_lt?: Maybe<String>;
  initialLetter_lte?: Maybe<String>;
  initialLetter_gt?: Maybe<String>;
  initialLetter_gte?: Maybe<String>;
  initialLetter_contains?: Maybe<String>;
  initialLetter_not_contains?: Maybe<String>;
  initialLetter_starts_with?: Maybe<String>;
  initialLetter_not_starts_with?: Maybe<String>;
  initialLetter_ends_with?: Maybe<String>;
  initialLetter_not_ends_with?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  isHeavyUser_not?: Maybe<Boolean>;
  level?: Maybe<levelType>;
  level_not?: Maybe<levelType>;
  level_in?: Maybe<levelType[] | levelType>;
  level_not_in?: Maybe<levelType[] | levelType>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentUpdateManyMutationInput {
  contents?: Maybe<String>;
  likes?: Maybe<Int>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContributorCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  type?: Maybe<ContributorCreatetypeInput>;
  contributedAt: DateTimeInput;
  correctionRange?: Maybe<String>;
}

export type GitPostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GitPostUpdateManyMutationInput {
  gitId?: Maybe<String>;
  gitAuthor?: Maybe<GitPostUpdategitAuthorInput>;
  gitTitle?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userType: UserType;
  name: String;
  openId: String;
  alias: String;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level: levelType;
  posts?: Maybe<PostCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
}

export interface PostCreateOneWithoutGitPostsInput {
  create?: Maybe<PostCreateWithoutGitPostsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface ContributorCreatetypeInput {
  set?: Maybe<ContributorType[] | ContributorType>;
}

export interface BookPostCreateInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutBookPostsInput;
  bookName: String;
  bookPublisher: String;
  LinkedStore?: Maybe<BookPostCreateLinkedStoreInput>;
}

export interface ContributorUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  type?: Maybe<ContributorUpdatetypeInput>;
  contributedAt?: Maybe<DateTimeInput>;
  correctionRange?: Maybe<String>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  bookPosts: BookPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BookPostCreateOneWithoutPostInput {
  create?: Maybe<BookPostCreateWithoutPostInput>;
  connect?: Maybe<BookPostWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  userType?: Maybe<UserType>;
  name?: Maybe<String>;
  openId?: Maybe<String>;
  alias?: Maybe<String>;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level?: Maybe<levelType>;
  posts?: Maybe<PostUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
}

export interface CommentCreateWithoutRepliesInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutCommentsInput;
  author: UserCreateOneWithoutCommentsInput;
  contents: String;
  likes?: Maybe<Int>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SeriesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeriesWhereInput>;
  AND?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
  OR?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
  NOT?: Maybe<SeriesSubscriptionWhereInput[] | SeriesSubscriptionWhereInput>;
}

export interface ContributorUpdatetypeInput {
  set?: Maybe<ContributorType[] | ContributorType>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContributorUpdateManyMutationInput {
  type?: Maybe<ContributorUpdatetypeInput>;
  contributedAt?: Maybe<DateTimeInput>;
  correctionRange?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  topic: TopicCreateOneWithoutEventsInput;
  description: String;
  mainImg?: Maybe<String>;
}

export interface FileUpdatetypeInput {
  set?: Maybe<FileType[] | FileType>;
}

export interface TopicCreateOneWithoutEventsInput {
  create?: Maybe<TopicCreateWithoutEventsInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface EventCreateWithoutTopicInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  mainImg?: Maybe<String>;
}

export interface TopicCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  name: String;
  posts?: Maybe<PostCreateManyWithoutTopicsInput>;
  coverImg?: Maybe<String>;
  coverDescription?: Maybe<String>;
  numViews?: Maybe<Int>;
  backImg?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface PostCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  topics?: Maybe<TopicCreateManyWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  bookPosts: BookPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface TopicUpdateOneRequiredWithoutEventsInput {
  create?: Maybe<TopicCreateWithoutEventsInput>;
  update?: Maybe<TopicUpdateWithoutEventsDataInput>;
  upsert?: Maybe<TopicUpsertWithoutEventsInput>;
  connect?: Maybe<TopicWhereUniqueInput>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  topic?: Maybe<TopicUpdateOneRequiredWithoutEventsInput>;
  description?: Maybe<String>;
  mainImg?: Maybe<String>;
}

export interface PostCreateWithoutTopicsInput {
  id?: Maybe<ID_Input>;
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner: UserCreateOneWithoutPostsInput;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  gitPosts: GitPostCreateOneWithoutPostInput;
  bookPosts: BookPostCreateOneWithoutPostInput;
  series?: Maybe<SeriesCreateOneWithoutPostsInput>;
  contents: String;
  keywords?: Maybe<PostCreatekeywordsInput>;
  summary?: Maybe<PostCreatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface PostCreateManyWithoutTopicsInput {
  create?: Maybe<PostCreateWithoutTopicsInput[] | PostCreateWithoutTopicsInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export type ContributorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SeriesCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  userType: UserType;
  name: String;
  openId: String;
  alias: String;
  profileImg?: Maybe<String>;
  initialLetter?: Maybe<String>;
  isHeavyUser?: Maybe<Boolean>;
  level: levelType;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
}

export interface PostUpdateOneRequiredWithoutGitPostsInput {
  create?: Maybe<PostCreateWithoutGitPostsInput>;
  update?: Maybe<PostUpdateWithoutGitPostsDataInput>;
  upsert?: Maybe<PostUpsertWithoutGitPostsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutSeriesDataInput {
  category?: Maybe<Category>;
  coverImg?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  topics?: Maybe<TopicUpdateManyWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  gitPosts?: Maybe<GitPostUpdateOneRequiredWithoutPostInput>;
  bookPosts?: Maybe<BookPostUpdateOneRequiredWithoutPostInput>;
  contents?: Maybe<String>;
  keywords?: Maybe<PostUpdatekeywordsInput>;
  summary?: Maybe<PostUpdatesummaryInput>;
  numViews?: Maybe<Int>;
  numLikes?: Maybe<Int>;
  numComments?: Maybe<Int>;
  isPrivate?: Maybe<Boolean>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  userType: UserType;
  name: String;
  openId: String;
  alias: String;
  profileImg?: String;
  initialLetter?: String;
  isHeavyUser: Boolean;
  level: levelType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userType: () => Promise<UserType>;
  name: () => Promise<String>;
  openId: () => Promise<String>;
  alias: () => Promise<String>;
  profileImg: () => Promise<String>;
  initialLetter: () => Promise<String>;
  isHeavyUser: () => Promise<Boolean>;
  level: () => Promise<levelType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userType: () => Promise<AsyncIterator<UserType>>;
  name: () => Promise<AsyncIterator<String>>;
  openId: () => Promise<AsyncIterator<String>>;
  alias: () => Promise<AsyncIterator<String>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  initialLetter: () => Promise<AsyncIterator<String>>;
  isHeavyUser: () => Promise<AsyncIterator<Boolean>>;
  level: () => Promise<AsyncIterator<levelType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateContributor {
  count: Int;
}

export interface AggregateContributorPromise
  extends Promise<AggregateContributor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContributorSubscription
  extends Promise<AsyncIterator<AggregateContributor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitPost {
  id: ID_Output;
  gitId: String;
  gitAuthor: String[];
  gitTitle: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitPostPromise extends Promise<GitPost>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  gitId: () => Promise<String>;
  gitAuthor: () => Promise<String[]>;
  gitTitle: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitPostSubscription
  extends Promise<AsyncIterator<GitPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  gitId: () => Promise<AsyncIterator<String>>;
  gitAuthor: () => Promise<AsyncIterator<String[]>>;
  gitTitle: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitPostNullablePromise
  extends Promise<GitPost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  gitId: () => Promise<String>;
  gitAuthor: () => Promise<String[]>;
  gitTitle: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ContributorEdge {
  node: Contributor;
  cursor: String;
}

export interface ContributorEdgePromise
  extends Promise<ContributorEdge>,
    Fragmentable {
  node: <T = ContributorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContributorEdgeSubscription
  extends Promise<AsyncIterator<ContributorEdge>>,
    Fragmentable {
  node: <T = ContributorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Series {
  id: ID_Output;
  name: String;
  description: String;
  numViews: Int;
  numLikes: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SeriesPromise extends Promise<Series>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SeriesSubscription
  extends Promise<AsyncIterator<Series>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  numLikes: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SeriesNullablePromise
  extends Promise<Series | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ContributorConnection {
  pageInfo: PageInfo;
  edges: ContributorEdge[];
}

export interface ContributorConnectionPromise
  extends Promise<ContributorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContributorEdge>>() => T;
  aggregate: <T = AggregateContributorPromise>() => T;
}

export interface ContributorConnectionSubscription
  extends Promise<AsyncIterator<ContributorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContributorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContributorSubscription>() => T;
}

export interface Topic {
  id: ID_Output;
  name: String;
  coverImg?: String;
  coverDescription?: String;
  numViews: Int;
  backImg?: String;
  icon?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coverImg: () => Promise<String>;
  coverDescription: () => Promise<String>;
  numViews: () => Promise<Int>;
  backImg: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coverImg: () => Promise<AsyncIterator<String>>;
  coverDescription: () => Promise<AsyncIterator<String>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  backImg: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TopicNullablePromise
  extends Promise<Topic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coverImg: () => Promise<String>;
  coverDescription: () => Promise<String>;
  numViews: () => Promise<Int>;
  backImg: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Event {
  id: ID_Output;
  name: String;
  description: String;
  mainImg?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  topic: <T = TopicPromise>() => T;
  description: () => Promise<String>;
  mainImg: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  topic: <T = TopicSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  mainImg: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  topic: <T = TopicPromise>() => T;
  description: () => Promise<String>;
  mainImg: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TopicSubscriptionPayload {
  mutation: MutationType;
  node: Topic;
  updatedFields: String[];
  previousValues: TopicPreviousValues;
}

export interface TopicSubscriptionPayloadPromise
  extends Promise<TopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TopicPreviousValuesPromise>() => T;
}

export interface TopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TopicPreviousValuesSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  contents: String;
  likes: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  author: <T = UserPromise>() => T;
  contents: () => Promise<String>;
  replies: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  author: <T = UserSubscription>() => T;
  contents: () => Promise<AsyncIterator<String>>;
  replies: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  author: <T = UserPromise>() => T;
  contents: () => Promise<String>;
  replies: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Contributor {
  id: ID_Output;
  type: ContributorType[];
  contributedAt: DateTimeOutput;
  correctionRange?: String;
}

export interface ContributorPromise extends Promise<Contributor>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<ContributorType[]>;
  contributedAt: () => Promise<DateTimeOutput>;
  correctionRange: () => Promise<String>;
}

export interface ContributorSubscription
  extends Promise<AsyncIterator<Contributor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<ContributorType[]>>;
  contributedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  correctionRange: () => Promise<AsyncIterator<String>>;
}

export interface ContributorNullablePromise
  extends Promise<Contributor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<ContributorType[]>;
  contributedAt: () => Promise<DateTimeOutput>;
  correctionRange: () => Promise<String>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface BookPost {
  id: ID_Output;
  bookName: String;
  bookPublisher: String;
  LinkedStore: LinkedStore[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPostPromise extends Promise<BookPost>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  bookName: () => Promise<String>;
  bookPublisher: () => Promise<String>;
  LinkedStore: () => Promise<LinkedStore[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPostSubscription
  extends Promise<AsyncIterator<BookPost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  bookName: () => Promise<AsyncIterator<String>>;
  bookPublisher: () => Promise<AsyncIterator<String>>;
  LinkedStore: () => Promise<AsyncIterator<LinkedStore[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookPostNullablePromise
  extends Promise<BookPost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  bookName: () => Promise<String>;
  bookPublisher: () => Promise<String>;
  LinkedStore: () => Promise<LinkedStore[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookPostSubscriptionPayload {
  mutation: MutationType;
  node: BookPost;
  updatedFields: String[];
  previousValues: BookPostPreviousValues;
}

export interface BookPostSubscriptionPayloadPromise
  extends Promise<BookPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPostPreviousValuesPromise>() => T;
}

export interface BookPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPostPreviousValuesSubscription>() => T;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

export interface BookPostPreviousValues {
  id: ID_Output;
  bookName: String;
  bookPublisher: String;
  LinkedStore: LinkedStore[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPostPreviousValuesPromise
  extends Promise<BookPostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bookName: () => Promise<String>;
  bookPublisher: () => Promise<String>;
  LinkedStore: () => Promise<LinkedStore[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPostPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bookName: () => Promise<AsyncIterator<String>>;
  bookPublisher: () => Promise<AsyncIterator<String>>;
  LinkedStore: () => Promise<AsyncIterator<LinkedStore[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SeriesEdge {
  node: Series;
  cursor: String;
}

export interface SeriesEdgePromise extends Promise<SeriesEdge>, Fragmentable {
  node: <T = SeriesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeriesEdgeSubscription
  extends Promise<AsyncIterator<SeriesEdge>>,
    Fragmentable {
  node: <T = SeriesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  contents: String;
  likes: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contents: () => Promise<String>;
  likes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contents: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateGitPost {
  count: Int;
}

export interface AggregateGitPostPromise
  extends Promise<AggregateGitPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitPostSubscription
  extends Promise<AsyncIterator<AggregateGitPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GitPostConnection {
  pageInfo: PageInfo;
  edges: GitPostEdge[];
}

export interface GitPostConnectionPromise
  extends Promise<GitPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitPostEdge>>() => T;
  aggregate: <T = AggregateGitPostPromise>() => T;
}

export interface GitPostConnectionSubscription
  extends Promise<AsyncIterator<GitPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitPostSubscription>() => T;
}

export interface ContributorSubscriptionPayload {
  mutation: MutationType;
  node: Contributor;
  updatedFields: String[];
  previousValues: ContributorPreviousValues;
}

export interface ContributorSubscriptionPayloadPromise
  extends Promise<ContributorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContributorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContributorPreviousValuesPromise>() => T;
}

export interface ContributorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContributorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContributorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContributorPreviousValuesSubscription>() => T;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContributorPreviousValues {
  id: ID_Output;
  type: ContributorType[];
  contributedAt: DateTimeOutput;
  correctionRange?: String;
}

export interface ContributorPreviousValuesPromise
  extends Promise<ContributorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ContributorType[]>;
  contributedAt: () => Promise<DateTimeOutput>;
  correctionRange: () => Promise<String>;
}

export interface ContributorPreviousValuesSubscription
  extends Promise<AsyncIterator<ContributorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ContributorType[]>>;
  contributedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  correctionRange: () => Promise<AsyncIterator<String>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface File {
  id: ID_Output;
  alias: String;
  type: FileType[];
  size: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  alias: () => Promise<String>;
  type: () => Promise<FileType[]>;
  size: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  alias: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<FileType[]>>;
  size: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  alias: () => Promise<String>;
  type: () => Promise<FileType[]>;
  size: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  mainImg?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  mainImg: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  mainImg: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateBookPost {
  count: Int;
}

export interface AggregateBookPostPromise
  extends Promise<AggregateBookPost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookPostSubscription
  extends Promise<AsyncIterator<AggregateBookPost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  category: Category;
  coverImg?: String;
  contents: String;
  keywords: String[];
  summary: String[];
  numViews: Int;
  numLikes: Int;
  numComments: Int;
  isPrivate: Boolean;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Category>;
  coverImg: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gitPosts: <T = GitPostPromise>() => T;
  bookPosts: <T = BookPostPromise>() => T;
  series: <T = SeriesPromise>() => T;
  contents: () => Promise<String>;
  keywords: () => Promise<String[]>;
  summary: () => Promise<String[]>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  numComments: () => Promise<Int>;
  isPrivate: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<Category>>;
  coverImg: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  topics: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gitPosts: <T = GitPostSubscription>() => T;
  bookPosts: <T = BookPostSubscription>() => T;
  series: <T = SeriesSubscription>() => T;
  contents: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  summary: () => Promise<AsyncIterator<String[]>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  numLikes: () => Promise<AsyncIterator<Int>>;
  numComments: () => Promise<AsyncIterator<Int>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Category>;
  coverImg: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  topics: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gitPosts: <T = GitPostPromise>() => T;
  bookPosts: <T = BookPostPromise>() => T;
  series: <T = SeriesPromise>() => T;
  contents: () => Promise<String>;
  keywords: () => Promise<String[]>;
  summary: () => Promise<String[]>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  numComments: () => Promise<Int>;
  isPrivate: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface AggregateSeries {
  count: Int;
}

export interface AggregateSeriesPromise
  extends Promise<AggregateSeries>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeriesSubscription
  extends Promise<AsyncIterator<AggregateSeries>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FilePreviousValues {
  id: ID_Output;
  alias: String;
  type: FileType[];
  size: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  type: () => Promise<FileType[]>;
  size: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<FileType[]>>;
  size: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookPostEdge {
  node: BookPost;
  cursor: String;
}

export interface BookPostEdgePromise
  extends Promise<BookPostEdge>,
    Fragmentable {
  node: <T = BookPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookPostEdgeSubscription
  extends Promise<AsyncIterator<BookPostEdge>>,
    Fragmentable {
  node: <T = BookPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GitPostEdge {
  node: GitPost;
  cursor: String;
}

export interface GitPostEdgePromise extends Promise<GitPostEdge>, Fragmentable {
  node: <T = GitPostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitPostEdgeSubscription
  extends Promise<AsyncIterator<GitPostEdge>>,
    Fragmentable {
  node: <T = GitPostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GitPostSubscriptionPayload {
  mutation: MutationType;
  node: GitPost;
  updatedFields: String[];
  previousValues: GitPostPreviousValues;
}

export interface GitPostSubscriptionPayloadPromise
  extends Promise<GitPostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitPostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitPostPreviousValuesPromise>() => T;
}

export interface GitPostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitPostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitPostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitPostPreviousValuesSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GitPostPreviousValues {
  id: ID_Output;
  gitId: String;
  gitAuthor: String[];
  gitTitle: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitPostPreviousValuesPromise
  extends Promise<GitPostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitId: () => Promise<String>;
  gitAuthor: () => Promise<String[]>;
  gitTitle: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitPostPreviousValuesSubscription
  extends Promise<AsyncIterator<GitPostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitId: () => Promise<AsyncIterator<String>>;
  gitAuthor: () => Promise<AsyncIterator<String[]>>;
  gitTitle: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface SeriesConnection {
  pageInfo: PageInfo;
  edges: SeriesEdge[];
}

export interface SeriesConnectionPromise
  extends Promise<SeriesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeriesEdge>>() => T;
  aggregate: <T = AggregateSeriesPromise>() => T;
}

export interface SeriesConnectionSubscription
  extends Promise<AsyncIterator<SeriesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeriesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeriesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  userType: UserType;
  name: String;
  openId: String;
  alias: String;
  profileImg?: String;
  initialLetter?: String;
  isHeavyUser: Boolean;
  level: levelType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userType: () => Promise<UserType>;
  name: () => Promise<String>;
  openId: () => Promise<String>;
  alias: () => Promise<String>;
  profileImg: () => Promise<String>;
  initialLetter: () => Promise<String>;
  isHeavyUser: () => Promise<Boolean>;
  level: () => Promise<levelType>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userType: () => Promise<AsyncIterator<UserType>>;
  name: () => Promise<AsyncIterator<String>>;
  openId: () => Promise<AsyncIterator<String>>;
  alias: () => Promise<AsyncIterator<String>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  initialLetter: () => Promise<AsyncIterator<String>>;
  isHeavyUser: () => Promise<AsyncIterator<Boolean>>;
  level: () => Promise<AsyncIterator<levelType>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userType: () => Promise<UserType>;
  name: () => Promise<String>;
  openId: () => Promise<String>;
  alias: () => Promise<String>;
  profileImg: () => Promise<String>;
  initialLetter: () => Promise<String>;
  isHeavyUser: () => Promise<Boolean>;
  level: () => Promise<levelType>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SeriesPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  numViews: Int;
  numLikes: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SeriesPreviousValuesPromise
  extends Promise<SeriesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SeriesPreviousValuesSubscription
  extends Promise<AsyncIterator<SeriesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  numLikes: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SeriesSubscriptionPayload {
  mutation: MutationType;
  node: Series;
  updatedFields: String[];
  previousValues: SeriesPreviousValues;
}

export interface SeriesSubscriptionPayloadPromise
  extends Promise<SeriesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeriesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeriesPreviousValuesPromise>() => T;
}

export interface SeriesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeriesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeriesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeriesPreviousValuesSubscription>() => T;
}

export interface BookPostConnection {
  pageInfo: PageInfo;
  edges: BookPostEdge[];
}

export interface BookPostConnectionPromise
  extends Promise<BookPostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookPostEdge>>() => T;
  aggregate: <T = AggregateBookPostPromise>() => T;
}

export interface BookPostConnectionSubscription
  extends Promise<AsyncIterator<BookPostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookPostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookPostSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  category: Category;
  coverImg?: String;
  contents: String;
  keywords: String[];
  summary: String[];
  numViews: Int;
  numLikes: Int;
  numComments: Int;
  isPrivate: Boolean;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  category: () => Promise<Category>;
  coverImg: () => Promise<String>;
  contents: () => Promise<String>;
  keywords: () => Promise<String[]>;
  summary: () => Promise<String[]>;
  numViews: () => Promise<Int>;
  numLikes: () => Promise<Int>;
  numComments: () => Promise<Int>;
  isPrivate: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: () => Promise<AsyncIterator<Category>>;
  coverImg: () => Promise<AsyncIterator<String>>;
  contents: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  summary: () => Promise<AsyncIterator<String[]>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  numLikes: () => Promise<AsyncIterator<Int>>;
  numComments: () => Promise<AsyncIterator<Int>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TopicPreviousValues {
  id: ID_Output;
  name: String;
  coverImg?: String;
  coverDescription?: String;
  numViews: Int;
  backImg?: String;
  icon?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TopicPreviousValuesPromise
  extends Promise<TopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  coverImg: () => Promise<String>;
  coverDescription: () => Promise<String>;
  numViews: () => Promise<Int>;
  backImg: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TopicPreviousValuesSubscription
  extends Promise<AsyncIterator<TopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  coverImg: () => Promise<AsyncIterator<String>>;
  coverDescription: () => Promise<AsyncIterator<String>>;
  numViews: () => Promise<AsyncIterator<Int>>;
  backImg: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "GitPost",
    embedded: false
  },
  {
    name: "BookPost",
    embedded: false
  },
  {
    name: "Contributor",
    embedded: false
  },
  {
    name: "Series",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "levelType",
    embedded: false
  },
  {
    name: "LinkedStore",
    embedded: false
  },
  {
    name: "ContributorType",
    embedded: false
  },
  {
    name: "FileType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

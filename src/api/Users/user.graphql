#  import { UserOrderByInput, PostOrderByInput, CommentOrderByInput } from '../../generated/prisma.graphql'
 
type User {
  id: ID!
  openId: String
  accessToken: String!
  userType: UserType!
  email: String!
  name: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean!
  level: levelType
  posts: [Post!]!
  # comments: [Comment!]!
}
type Query {
  """ userType && openId값이 일치하는(옵션) 유저의 전체 정보 요청"""
  
  users(data: SocialUserInput, first: Int, skip: Int, after: String): [User!]!
  """id값과 일치하는 유저 반환"""
  user(id: ID!): User
  githubLoginUrl: String
  test: User
}
type Mutation {
  """유저의 기본 정보만 업데이트(level, login 관련 정보는 불가)"""
  updateUser(id: ID!, input: UserInput): User
  """특정 유저 삭제"""
  deleteUser(id: ID!): User
  githubAccessToken(code: String!): AuthToken!
  """깃허브 로그인 & 최초 로그인 시 자동으로 회원가입"""
  authGithub(input: AuthInput!): AuthResponse
  """구글 로그인 & 최초 로그인 시 자동으로 회원가입"""
  authGoogle(input: AuthInput!): AuthResponse 
}
enum UserType{
  GITHUB,
  GOOGLE,
}
enum levelType{
  VISITOR,
  MEMBER,
  WRITER,
  MANAGER
}


type AuthToken {
  token: String!
}
type AuthResponse {
  token: String
  user: User!
}

input AuthInput {
  accessToken: String!
}

input UserInput {
  name: String
  alias: String
  profileImg: String
  initialLetter: String
  isHeavyUser: Boolean
}
input SocialUserInput {
  userType: UserType
  openId: String
  id: String
}